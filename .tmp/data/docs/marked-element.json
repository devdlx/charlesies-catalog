{"elements":[{"type":"element","desc":"\nElement wrapper for the [marked](http://marked.org/) library.\n\n`<marked-element>` accepts Markdown source either via its `markdown` attribute:\n\n    <marked-element markdown=\"`Markdown` is _awesome_!\"></marked-element>\n\nOr, you can provide it via a `<script type=\"text/markdown\">` element child:\n\n    <marked-element>\n      <script type=\"text/markdown\">\n        Check out my markdown!\n\n        We can even embed elements without fear of the HTML parser mucking up their\n        textual representation:\n\n        ```html\n        <awesome-sauce>\n          <div>Oops, I'm about to forget to close this div.\n        </awesome-sauce>\n        ```\n      </script>\n    </marked-element>\n\nNote that the `<script type=\"text/markdown\">` approach is _static_. Changes to\nthe script content will _not_ update the rendered markdown!\n","events":[],"properties":[{"name":"markdown","type":"String","desc":"The markdown source that should be rendered by this element. ","published":true,"default":null},{"name":"render","type":"Function","desc":"\nRenders `markdown` into this element's DOM.\n\nThis is automatically called whenever the `markdown` property is changed.\n\nThe only case where you should be calling this is if you are providing\nmarkdown via `<script type=\"text/markdown\">` after this element has been\nconstructed (or updating that markdown).\n     ","params":[],"function":true},{"name":"_highlight","type":"Function","params":[{"name":"code"},{"name":"lang"}],"private":true,"function":true,"default":""},{"name":"_unindent","type":"Function","params":[{"name":"text"}],"private":true,"function":true,"default":""},{"name":"attached","type":"Function","desc":"\nRenders `markdown` to HTML when the element is attached.\n\nThis serves a dual purpose:\n\n * Prevents unnecessary work (no need to render when not visible).\n\n * `attached` fires top-down, so we can give ancestors a chance to\n   register listeners for the `syntax-highlight` event _before_ we render\n   any markdown.\n\n     ","params":[],"private":true,"configuration":true,"function":true},{"name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"marked-element","jsdoc":{"tags":[{"tag":"element","type":null,"description":"marked-element"},{"tag":"group","type":null,"description":"Molecules"},{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"demo/index.html","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"}],"behaviors":[],"features":[],"elementsByTagName":{"marked-element":{"type":"element","desc":"\nElement wrapper for the [marked](http://marked.org/) library.\n\n`<marked-element>` accepts Markdown source either via its `markdown` attribute:\n\n    <marked-element markdown=\"`Markdown` is _awesome_!\"></marked-element>\n\nOr, you can provide it via a `<script type=\"text/markdown\">` element child:\n\n    <marked-element>\n      <script type=\"text/markdown\">\n        Check out my markdown!\n\n        We can even embed elements without fear of the HTML parser mucking up their\n        textual representation:\n\n        ```html\n        <awesome-sauce>\n          <div>Oops, I'm about to forget to close this div.\n        </awesome-sauce>\n        ```\n      </script>\n    </marked-element>\n\nNote that the `<script type=\"text/markdown\">` approach is _static_. Changes to\nthe script content will _not_ update the rendered markdown!\n","events":[],"properties":[{"name":"markdown","type":"String","desc":"The markdown source that should be rendered by this element. ","published":true,"default":null},{"name":"render","type":"Function","desc":"\nRenders `markdown` into this element's DOM.\n\nThis is automatically called whenever the `markdown` property is changed.\n\nThe only case where you should be calling this is if you are providing\nmarkdown via `<script type=\"text/markdown\">` after this element has been\nconstructed (or updating that markdown).\n     ","params":[],"function":true},{"name":"_highlight","type":"Function","params":[{"name":"code"},{"name":"lang"}],"private":true,"function":true,"default":""},{"name":"_unindent","type":"Function","params":[{"name":"text"}],"private":true,"function":true,"default":""},{"name":"attached","type":"Function","desc":"\nRenders `markdown` to HTML when the element is attached.\n\nThis serves a dual purpose:\n\n * Prevents unnecessary work (no need to render when not visible).\n\n * `attached` fires top-down, so we can give ancestors a chance to\n   register listeners for the `syntax-highlight` event _before_ we render\n   any markdown.\n\n     ","params":[],"private":true,"configuration":true,"function":true},{"name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"marked-element","jsdoc":{"tags":[{"tag":"element","type":null,"description":"marked-element"},{"tag":"group","type":null,"description":"Molecules"},{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"demo/index.html","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"}}}
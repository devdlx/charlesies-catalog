{"elements":[{"type":"element","desc":"\nThe `<platinum-sw-import-script>` element is used to import a JavaScript file that is executed\neach time the service worker starts up.\n\n`<platinum-sw-import-script>` needs to be a child element of `<platinum-sw-register>`.\n\nA common use case is to define a custom request handler for a `fetch` event, but it can be used\nfor any type of code that you want to be executed by the service worker.\n\n    <platinum-sw-register>\n      <platinum-sw-import-script href=\"custom-fetch-handler.js\"></platinum-sw-import-script>\n      <platinum-sw-fetch handler=\"customFetchHandler\"\n                         path=\"/(.*)/customFetch\"></platinum-sw-fetch>\n    </platinum-sw-register>\n\nYou can specify multiple `<platinum-sw-import-script>` elements, each one corresponding to a\ndifferent JavaScript file. The JavaScript files will be loaded in the order in which the\n`<platinum-sw-import-script>` elements appear. Under the hood, this results in an\n[`importScripts()`](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts)\ncall made from the context of the service worker.\n   ","events":[],"properties":[{"name":"href","type":"string","desc":"\nThe URL of the JavaScript file that you want imported.\n\nRelative URLs are assumed to be\nrelative to the service worker's script location, which will almost always be the same\nlocation as the page which includes this element.\n       ","published":true},{"name":"_getParameters","type":"Function","params":[],"private":true,"function":true,"default":""}],"is":"platinum-sw-import-script","demos":[]},{"type":"element","desc":"\nThe `<platinum-sw-cache>` element makes it easy to precache specific resources, perform runtime\ncaching, and serve your cached resources when a network is unavailable.\nUnder the hood, the [sw-toolbox](https://github.com/googlechrome/sw-toolbox) library is used\nfor all the caching and request handling logic.\n`<platinum-sw-cache>` needs to be a child element of `<platinum-sw-register>`.\nA simple, yet useful configuration is\n\n    <platinum-sw-register>\n      <platinum-sw-cache></platinum-sw-cache>\n    </platinum-sw-register>\n\nThis is enough to have all of the (local) resources your site uses cached at runtime.\n(It uses the default `defaultCacheStrategy` of \"networkFirst\".)\nWhen there's a network available, visits to your site will go against the network copy of the\nresources, but if someone visits your site when they're offline, all the cached resources will\nbe used.\n\n","events":[],"properties":[{"name":"defaultCacheStrategy","type":"String","desc":"\nThe caching strategy used for all local (i.e. same-origin) requests.\n\nFor a list of strategies, see the [`sw-toolbox` documentation](https://github.com/GoogleChrome/sw-toolbox#built-in-handlers).\nSpecify a strategy as a string, without the \"toolbox\" prefix. E.g., for\n`toolbox.networkFirst`, set `defaultCacheStrategy` to \"networkFirst\".\n\nNote that the \"cacheFirst\" and \"cacheOnly\" strategies are not recommended, and may be\nexplicitly prevented in a future release. More information can be found at\nhttps://github.com/PolymerElements/platinum-sw#cacheonly--cachefirst-defaultcachestrategy-considered-harmful\n\n","published":true,"default":"networkFirst","jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/GoogleChrome/sw-toolbox#built-in-handlers}"}]}},{"name":"precache","type":"Array","desc":"\nUsed to provide a list of URLs that are always precached as soon as the service worker is\ninstalled. Corresponds to  [`sw-toolbox`'s `precache()` method](https://github.com/GoogleChrome/sw-toolbox#toolboxprecachearrayofurls).\n\nThis is useful for URLs that that wouldn't necessarily be picked up by runtime caching,\ni.e. a list of resources that are needed by one of the subpages of your site, or a list of\nresources that are only loaded via user interaction.\n\n`precache` can be used in conjunction with `precacheFile`, and the two arrays will be\nconcatenated.\n\n","published":true,"default":"[]","jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/GoogleChrome/sw-toolbox#toolboxprecachearrayofurls}"}]}},{"name":"precacheFile","type":"string","desc":"\nUsed to provide a list of URLs that are always precached as soon as the service worker is\ninstalled. Corresponds to  [`sw-toolbox`'s `precache()` method](https://github.com/GoogleChrome/sw-toolbox#toolboxprecachearrayofurls).\n\nWhile the `precache` option supports provided the array of URLs in as an inline attribute,\nthis option supports providing them as an array in JSON file, which is fetched at runtime.\nThis is useful if the array is generated via a separate build step, as it's easier to\nwrite that output to a file then it is to modify inline HTML content.\n\n`precacheFile` can be used in conjunction with `precache`, and the two arrays will be\nconcatenated.\n\n","published":true,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/GoogleChrome/sw-toolbox#toolboxprecachearrayofurls}"}]}},{"name":"_getParameters","type":"Function","params":[{"name":"baseURI"}],"private":true,"function":true,"default":""}],"is":"platinum-sw-cache","jsdoc":{"tags":[{"tag":"demo","type":null,"name":"demo/index.html","description":"An offline-capable eReader demo."}]},"demos":[{"desc":"An offline-capable eReader demo.","path":"demo/index.html"}]},{"type":"element","desc":"\nThe `<platinum-sw-register>` element handles\n[service worker](http://www.html5rocks.com/en/tutorials/service-worker/introduction/)\nregistration, reflects the overall service worker state, and coordinates the configuration\nprovided by other Service Worker Elements.\n`<platinum-sw-register>` is used as a parent element for child elements in the\n`<platinum-sw-*>` group.\n\n    <platinum-sw-register skip-waiting\n                          clients-claim\n                          auto-register\n                          state=\"{{state}}\"\n                          on-service-worker-error=\"handleSWError\"\n                          on-service-worker-updated=\"handleSWUpdated\"\n                          on-service-worker-installed=\"handleSWInstalled\">\n      ...one or more <platinum-sw-*> children which share the service worker registration...\n    </platinum-sw-register>\n\nPlease see https://github.com/PolymerElements/platinum-sw#top-level-sw-importjs for a\n*crucial* prerequisite file you must create before `<platinum-sw-register>` can be used!\n\n","events":[{"desc":"\nFired when an error prevents the service worker installation from completing.\n\n","jsdoc":{"description":"\nFired when an error prevents the service worker installation from completing.\n\n","tags":[{"tag":"event","type":null,"description":"service-worker-error"},{"tag":"param","type":"String","name":"A","description":"message indicating what went wrong."}],"orig":"*\n       * Fired when an error prevents the service worker installation from completing.\n       *\n       * @event service-worker-error\n       * @param {String} A message indicating what went wrong.\n       "},"name":"service-worker-error","params":[{"type":"String","desc":"message indicating what went wrong.","name":"A"}]},{"desc":"\nFired when the initial service worker installation completes successfully.\nThe service worker will normally only be installed once, the first time a page with a\n`<platinum-sw-register>` element is visited in a given browser. If the same page is visited\nagain, the existing service worker will be reused, and there won't be another\n`service-worker-installed` fired.\n\n","jsdoc":{"description":"\nFired when the initial service worker installation completes successfully.\nThe service worker will normally only be installed once, the first time a page with a\n`<platinum-sw-register>` element is visited in a given browser. If the same page is visited\nagain, the existing service worker will be reused, and there won't be another\n`service-worker-installed` fired.\n\n","tags":[{"tag":"event","type":null,"description":"service-worker-installed"},{"tag":"param","type":"String","name":"A","description":"message indicating that the installation succeeded."}],"orig":"*\n       * Fired when the initial service worker installation completes successfully.\n       * The service worker will normally only be installed once, the first time a page with a\n       * `<platinum-sw-register>` element is visited in a given browser. If the same page is visited\n       * again, the existing service worker will be reused, and there won't be another\n       * `service-worker-installed` fired.\n       *\n       * @event service-worker-installed\n       * @param {String} A message indicating that the installation succeeded.\n       "},"name":"service-worker-installed","params":[{"type":"String","desc":"message indicating that the installation succeeded.","name":"A"}]},{"desc":"\nFired when the service worker update flow completes successfully.\nIf you make changes to your `<platinum-sw-register>` configuration (i.e. by adding in new\n`<platinum-sw-*>` child elements, or changing their attributes), users who had the old\nservice worker installed will get the update installed when they see the modified elements.\n\n","jsdoc":{"description":"\nFired when the service worker update flow completes successfully.\nIf you make changes to your `<platinum-sw-register>` configuration (i.e. by adding in new\n`<platinum-sw-*>` child elements, or changing their attributes), users who had the old\nservice worker installed will get the update installed when they see the modified elements.\n\n","tags":[{"tag":"event","type":null,"description":"service-worker-updated"},{"tag":"param","type":"String","name":"A","description":"message indicating that the update succeeded."}],"orig":"*\n       * Fired when the service worker update flow completes successfully.\n       * If you make changes to your `<platinum-sw-register>` configuration (i.e. by adding in new\n       * `<platinum-sw-*>` child elements, or changing their attributes), users who had the old\n       * service worker installed will get the update installed when they see the modified elements.\n       *\n       * @event service-worker-updated\n       * @param {String} A message indicating that the update succeeded.\n       "},"name":"service-worker-updated","params":[{"type":"String","desc":"message indicating that the update succeeded.","name":"A"}]}],"properties":[{"name":"autoRegister","type":"Boolean","desc":"\nWhether this element should automatically register the corresponding service worker as\nsoon as its added to a page.\n\nIf set to `false`, then the service worker won't be automatically registered, and you\nmust call this element's `register()` method if you want service worker functionality.\nThis is useful if, for example, the service worker needs to be configured using\ninformation that isn't immediately available at the time the page loads.\n\nIf set to `true`, the service worker will be automatically registered without having to\ncall any methods.\n         ","published":true,"default":false},{"name":"clientsClaim","type":"Boolean","desc":"\nWhether the activated service worker should [take immediate control](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#clients-claim-method)\nof any pages under its scope.\n\nIf this is `false`, the service worker won't have any effect until the next time the page\nis visited/reloaded.\nIf this is `true`, it will take control and start handling events for the current page\n(and any pages under the same scope open in other tabs/windows) as soon it's active.\n","published":true,"default":false,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#clients-claim-method}"}]}},{"name":"href","type":"String","desc":"\nThe service worker script that is [registered](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#navigator-service-worker-register).\nThe script *should* be located at the top level of your site, to ensure that it is able\nto control all the pages on your site.\n\nIt's *strongly* recommended that you create a top-level file named `sw-import.js`\ncontaining only:\n\n`importScripts('bower_components/platinum-sw/service-worker.js');`\n\n(adjust to match the path where your `platinum-sw` element directory can be found).\n\nThis will ensure that your service worker script contains everything needed to play\nnicely with the Service Worker Elements group.\n\n","published":true,"default":"sw-import.js","jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#navigator-service-worker-register}"}]}},{"name":"register","type":"Function","desc":"\nRegisters the service worker based on the configuration options in this element and any\nchild elements.\n\nIf you set the `autoRegister` property to `true`, then this method is called automatically\nat page load.\nIt can be useful to set `autoRegister` to `false` and then explicitly call this method if\nthere are options that are only configured after the page is loaded.\n       ","params":[],"function":true},{"name":"reloadOnInstall","type":"Boolean","desc":"\nWhether the page should be automatically reloaded (via `window.location.reload()`) when\nthe service worker is successfully installed.\n\nWhile it's perfectly valid to continue using a page with a freshly installed service\nworker, it's a common pattern to want to reload it immediately following the install.\nThis ensures that, for example, if you're using a `<platinum-sw-cache>` with an on the\nfly caching strategy, it will get a chance to intercept all the requests needed to render\nyour page and store them in the cache.\n\nIf you don't immediately reload your page, then any resources that were loaded before the\nservice worker was installed (e.g. this `platinum-sw-register.html` file) won't be present\nin the cache until the next time the page is loaded.\n\nNote that this reload will only happen when a service worker is installed for the first\ntime. If the service worker is subsequently updated, it won't trigger another reload.\n         ","published":true,"default":false},{"name":"scope","type":"String","desc":"\nThe scope of the service worker, relative to the registered service worker script.\nAll pages that fall under this scope will be controlled by the registered service worker.\n\nNormally, this would not need to be changed, unless you want the service worker to only\napply to a subset of your site.\n\n","published":true,"default":"./","jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#navigator-service-worker-register}"}]}},{"name":"skipWaiting","type":"Boolean","desc":"\nWhether an updated service worker should [bypass the `waiting` state](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#service-worker-global-scope-skipwaiting)\nand immediately become `active`.\n\nNormally, during an update, the new service worker stays in the\n`waiting` state until the current page and any other tabs/windows that are using the old\nservice worker are unloaded.\n\nIf this is `false`, an updated service worker won't be activated until all instances of\nthe old server worker have been unloaded.\n\nIf this is `true`, an updated service worker will become `active` immediately.\n","published":true,"default":false,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#service-worker-global-scope-skipwaiting}"}]}},{"name":"state","type":"String","desc":"\nThe current state of the service worker registered by this element.\n\nOne of:\n- 'installed'\n- 'updated'\n- 'error'\n- 'unsupported'\n         ","published":true,"notify":true,"readOnly":true},{"name":"_constructServiceWorkerUrl","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_registerServiceWorker","type":"Function","params":[{"name":"serviceWorkerUrl"}],"private":true,"function":true,"default":""},{"name":"_serializeUrlParams","type":"Function","params":[{"name":"params"}],"private":true,"function":true,"default":""},{"name":"_unique","type":"Function","params":[{"name":"arr"}],"private":true,"function":true,"default":""},{"name":"_version","type":"string","desc":" kept in sync with the element's release number.","private":true},{"name":"attached","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"platinum-sw-register","jsdoc":{"tags":[{"tag":"demo","type":null,"name":"demo/index.html","description":"An offline-capable eReader demo."}]},"demos":[{"desc":"An offline-capable eReader demo.","path":"demo/index.html"}]},{"type":"element","desc":"\nThe `<platinum-sw-fetch>` element creates custom [`fetch` event](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#fetch-event-section)\nhandlers for given URL patterns. Possible use cases include:\n\n- Using a special caching strategy for specific URLs.\n- Returning static \"fallback\" responses instead of network errors when a remote API\nis unavailable.\n\nIn short, any scenario in which you'd like a service worker to intercept network\nrequests and provide custom response handling.\n\nIf you'd like a single caching policy applied to all same-origin requests, then an alternative\nto using `<platinum-sw-fetch>` is to use `<platinum-sw-cache>` with the `defaultCacheStategy`\nproperty set.\n\nUnder the hood, the [sw-toolbox](https://github.com/googlechrome/sw-toolbox) library is used\nfor all the request handling logic.\n\n`<platinum-sw-fetch>` needs to be a child element of `<platinum-sw-register>`.\n\nAn example configuration is:\n\n    <platinum-sw-register>\n      <platinum-sw-import-script href=\"custom-fetch-handler.js\"></platinum-sw-import-script>\n      <platinum-sw-fetch handler=\"customFetchHandler\"\n                         path=\"/(.*)/customFetch\"></platinum-sw-fetch>\n    </platinum-sw-register>\n\nThis implies that there's a `custom-fetch-handler.js` file in the same directory as the current\npage, which defines a `sw-toolbox` compliant\n[request handler](https://github.com/googlechrome/sw-toolbox#request-handlers) named\n`customFetchHandler`. This definition is imported using `<platinum-sw-import-script>`. The\n`<platinum-sw-fetch>` element takes care of mapping which request paths are handled by\n`customFetchHandler`.\n\nAnything not matching the `path` pattern is ignored by `<platinum-sw-fetch>`,\nand it's possible to have multiple `<platinum-sw-fetch>` elements that each define different\npaths and different handlers. The path matching is performed top-down, starting with the first\n`<platinum-sw-fetch>` element.\n   ","events":[],"properties":[{"name":"handler","type":"string","desc":"\nThe name of the request handler to use. This should be a `sw-toolbox`-style\n[request handler](https://github.com/googlechrome/sw-toolbox#request-handlers).\n\n`handler` is a `String`, not a `function`, so you're providing the name of a function, not\nthe function itself. It can be a function defined in the\n[`toolbox` scope](https://github.com/googlechrome/sw-toolbox#built-in-handlers)\n(e.g. 'networkFirst', 'fastest', 'networkOnly', etc.) or a function defined in the\n[`ServiceWorkerGlobalScope`](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#service-worker-global-scope),\nlike a function that is defined in a file that's imported via `platinum-sw-import-script`.\n*\n","published":true,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/GoogleChrome/sw-toolbox#built-in-handlers}"}]}},{"name":"origin","type":"string","desc":"\nBy default, `path` will only match URLs under the current host (i.e. same-origin requests).\nIf you'd like to apply `handler` to cross-origin requests, then use `origin` to specify\nwhich hosts will match. Setting `origin` is optional.\n\n`origin` is a `String`, but it is used internally to construct a\n[`RegExp` object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions),\nwhich is used for the matching. To properly escape RegExp sequences like `\\.`, it's\nnecessary to add in an extra level of string-escaping first ('\\\\.').\n\nNote that the `origin` value will be matched against the full domain name and the protocol.\nIf you want to match  'http' and 'https', then use 'https?://' at the start of your string.\n\nSome examples:\n- `origin=\"https?://.+\\\\.google\\\\.com\"` → a RegExp that matches `http` or `https` requests\n  made to any domain, as long as it ends in `.google.com`.\n- `origin=\"https://www\\\\.example\\\\.com\" → a RegExp that will only match `https` requests to\n  one domain, `www.example.com`.\n\n","published":true,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/googlechrome/sw-toolbox#toolboxrouterheadurlpattern-handler-options}"}]}},{"name":"path","type":"string","desc":"\nURLs with paths matching `path` will have `handler` applied to them.\n\nBy default, `path` will only match same-origin URLs. If you'd like it to match\ncross-origin URLs, use `path` in conjunction with `origin`.\n\nAs explained in the\n[`sw-toolbox` docs](https://github.com/googlechrome/sw-toolbox#toolboxrouterheadurlpattern-handler-options),\nthe URL path matching is done using the [`path-to-regexp`](https://github.com/pillarjs/path-to-regexp)\nmodule, which is the same logic used in [Express-style routing](http://expressjs.com/guide/routing.html).\n\nIn practice, you need to always use '/' as the first character of your `path`, and then\ncan use '(.*)' as a wildcard.\n\nSome examples:\n- `path=\"/(.*)/customFetch\"` → matches any path that ends with '/customFetch'.\n- `path=\"/customFetch(.*)\"` → matches any path that starts with '/customFetch', optionally\n  followed by other characters.\n\n","published":true,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/pillarjs/path-to-regexp}"}]}},{"name":"_getParameters","type":"Function","params":[{"name":"baseURI"}],"private":true,"function":true,"default":""}],"is":"platinum-sw-fetch","demos":[]}],"behaviors":[],"features":[],"elementsByTagName":{"platinum-sw-import-script":{"type":"element","desc":"\nThe `<platinum-sw-import-script>` element is used to import a JavaScript file that is executed\neach time the service worker starts up.\n\n`<platinum-sw-import-script>` needs to be a child element of `<platinum-sw-register>`.\n\nA common use case is to define a custom request handler for a `fetch` event, but it can be used\nfor any type of code that you want to be executed by the service worker.\n\n    <platinum-sw-register>\n      <platinum-sw-import-script href=\"custom-fetch-handler.js\"></platinum-sw-import-script>\n      <platinum-sw-fetch handler=\"customFetchHandler\"\n                         path=\"/(.*)/customFetch\"></platinum-sw-fetch>\n    </platinum-sw-register>\n\nYou can specify multiple `<platinum-sw-import-script>` elements, each one corresponding to a\ndifferent JavaScript file. The JavaScript files will be loaded in the order in which the\n`<platinum-sw-import-script>` elements appear. Under the hood, this results in an\n[`importScripts()`](https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/importScripts)\ncall made from the context of the service worker.\n   ","events":[],"properties":[{"name":"href","type":"string","desc":"\nThe URL of the JavaScript file that you want imported.\n\nRelative URLs are assumed to be\nrelative to the service worker's script location, which will almost always be the same\nlocation as the page which includes this element.\n       ","published":true},{"name":"_getParameters","type":"Function","params":[],"private":true,"function":true,"default":""}],"is":"platinum-sw-import-script","demos":[]},"platinum-sw-cache":{"type":"element","desc":"\nThe `<platinum-sw-cache>` element makes it easy to precache specific resources, perform runtime\ncaching, and serve your cached resources when a network is unavailable.\nUnder the hood, the [sw-toolbox](https://github.com/googlechrome/sw-toolbox) library is used\nfor all the caching and request handling logic.\n`<platinum-sw-cache>` needs to be a child element of `<platinum-sw-register>`.\nA simple, yet useful configuration is\n\n    <platinum-sw-register>\n      <platinum-sw-cache></platinum-sw-cache>\n    </platinum-sw-register>\n\nThis is enough to have all of the (local) resources your site uses cached at runtime.\n(It uses the default `defaultCacheStrategy` of \"networkFirst\".)\nWhen there's a network available, visits to your site will go against the network copy of the\nresources, but if someone visits your site when they're offline, all the cached resources will\nbe used.\n\n","events":[],"properties":[{"name":"defaultCacheStrategy","type":"String","desc":"\nThe caching strategy used for all local (i.e. same-origin) requests.\n\nFor a list of strategies, see the [`sw-toolbox` documentation](https://github.com/GoogleChrome/sw-toolbox#built-in-handlers).\nSpecify a strategy as a string, without the \"toolbox\" prefix. E.g., for\n`toolbox.networkFirst`, set `defaultCacheStrategy` to \"networkFirst\".\n\nNote that the \"cacheFirst\" and \"cacheOnly\" strategies are not recommended, and may be\nexplicitly prevented in a future release. More information can be found at\nhttps://github.com/PolymerElements/platinum-sw#cacheonly--cachefirst-defaultcachestrategy-considered-harmful\n\n","published":true,"default":"networkFirst","jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/GoogleChrome/sw-toolbox#built-in-handlers}"}]}},{"name":"precache","type":"Array","desc":"\nUsed to provide a list of URLs that are always precached as soon as the service worker is\ninstalled. Corresponds to  [`sw-toolbox`'s `precache()` method](https://github.com/GoogleChrome/sw-toolbox#toolboxprecachearrayofurls).\n\nThis is useful for URLs that that wouldn't necessarily be picked up by runtime caching,\ni.e. a list of resources that are needed by one of the subpages of your site, or a list of\nresources that are only loaded via user interaction.\n\n`precache` can be used in conjunction with `precacheFile`, and the two arrays will be\nconcatenated.\n\n","published":true,"default":"[]","jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/GoogleChrome/sw-toolbox#toolboxprecachearrayofurls}"}]}},{"name":"precacheFile","type":"string","desc":"\nUsed to provide a list of URLs that are always precached as soon as the service worker is\ninstalled. Corresponds to  [`sw-toolbox`'s `precache()` method](https://github.com/GoogleChrome/sw-toolbox#toolboxprecachearrayofurls).\n\nWhile the `precache` option supports provided the array of URLs in as an inline attribute,\nthis option supports providing them as an array in JSON file, which is fetched at runtime.\nThis is useful if the array is generated via a separate build step, as it's easier to\nwrite that output to a file then it is to modify inline HTML content.\n\n`precacheFile` can be used in conjunction with `precache`, and the two arrays will be\nconcatenated.\n\n","published":true,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/GoogleChrome/sw-toolbox#toolboxprecachearrayofurls}"}]}},{"name":"_getParameters","type":"Function","params":[{"name":"baseURI"}],"private":true,"function":true,"default":""}],"is":"platinum-sw-cache","jsdoc":{"tags":[{"tag":"demo","type":null,"name":"demo/index.html","description":"An offline-capable eReader demo."}]},"demos":[{"desc":"An offline-capable eReader demo.","path":"demo/index.html"}]},"platinum-sw-register":{"type":"element","desc":"\nThe `<platinum-sw-register>` element handles\n[service worker](http://www.html5rocks.com/en/tutorials/service-worker/introduction/)\nregistration, reflects the overall service worker state, and coordinates the configuration\nprovided by other Service Worker Elements.\n`<platinum-sw-register>` is used as a parent element for child elements in the\n`<platinum-sw-*>` group.\n\n    <platinum-sw-register skip-waiting\n                          clients-claim\n                          auto-register\n                          state=\"{{state}}\"\n                          on-service-worker-error=\"handleSWError\"\n                          on-service-worker-updated=\"handleSWUpdated\"\n                          on-service-worker-installed=\"handleSWInstalled\">\n      ...one or more <platinum-sw-*> children which share the service worker registration...\n    </platinum-sw-register>\n\nPlease see https://github.com/PolymerElements/platinum-sw#top-level-sw-importjs for a\n*crucial* prerequisite file you must create before `<platinum-sw-register>` can be used!\n\n","events":[{"desc":"\nFired when an error prevents the service worker installation from completing.\n\n","jsdoc":{"description":"\nFired when an error prevents the service worker installation from completing.\n\n","tags":[{"tag":"event","type":null,"description":"service-worker-error"},{"tag":"param","type":"String","name":"A","description":"message indicating what went wrong."}],"orig":"*\n       * Fired when an error prevents the service worker installation from completing.\n       *\n       * @event service-worker-error\n       * @param {String} A message indicating what went wrong.\n       "},"name":"service-worker-error","params":[{"type":"String","desc":"message indicating what went wrong.","name":"A"}]},{"desc":"\nFired when the initial service worker installation completes successfully.\nThe service worker will normally only be installed once, the first time a page with a\n`<platinum-sw-register>` element is visited in a given browser. If the same page is visited\nagain, the existing service worker will be reused, and there won't be another\n`service-worker-installed` fired.\n\n","jsdoc":{"description":"\nFired when the initial service worker installation completes successfully.\nThe service worker will normally only be installed once, the first time a page with a\n`<platinum-sw-register>` element is visited in a given browser. If the same page is visited\nagain, the existing service worker will be reused, and there won't be another\n`service-worker-installed` fired.\n\n","tags":[{"tag":"event","type":null,"description":"service-worker-installed"},{"tag":"param","type":"String","name":"A","description":"message indicating that the installation succeeded."}],"orig":"*\n       * Fired when the initial service worker installation completes successfully.\n       * The service worker will normally only be installed once, the first time a page with a\n       * `<platinum-sw-register>` element is visited in a given browser. If the same page is visited\n       * again, the existing service worker will be reused, and there won't be another\n       * `service-worker-installed` fired.\n       *\n       * @event service-worker-installed\n       * @param {String} A message indicating that the installation succeeded.\n       "},"name":"service-worker-installed","params":[{"type":"String","desc":"message indicating that the installation succeeded.","name":"A"}]},{"desc":"\nFired when the service worker update flow completes successfully.\nIf you make changes to your `<platinum-sw-register>` configuration (i.e. by adding in new\n`<platinum-sw-*>` child elements, or changing their attributes), users who had the old\nservice worker installed will get the update installed when they see the modified elements.\n\n","jsdoc":{"description":"\nFired when the service worker update flow completes successfully.\nIf you make changes to your `<platinum-sw-register>` configuration (i.e. by adding in new\n`<platinum-sw-*>` child elements, or changing their attributes), users who had the old\nservice worker installed will get the update installed when they see the modified elements.\n\n","tags":[{"tag":"event","type":null,"description":"service-worker-updated"},{"tag":"param","type":"String","name":"A","description":"message indicating that the update succeeded."}],"orig":"*\n       * Fired when the service worker update flow completes successfully.\n       * If you make changes to your `<platinum-sw-register>` configuration (i.e. by adding in new\n       * `<platinum-sw-*>` child elements, or changing their attributes), users who had the old\n       * service worker installed will get the update installed when they see the modified elements.\n       *\n       * @event service-worker-updated\n       * @param {String} A message indicating that the update succeeded.\n       "},"name":"service-worker-updated","params":[{"type":"String","desc":"message indicating that the update succeeded.","name":"A"}]}],"properties":[{"name":"autoRegister","type":"Boolean","desc":"\nWhether this element should automatically register the corresponding service worker as\nsoon as its added to a page.\n\nIf set to `false`, then the service worker won't be automatically registered, and you\nmust call this element's `register()` method if you want service worker functionality.\nThis is useful if, for example, the service worker needs to be configured using\ninformation that isn't immediately available at the time the page loads.\n\nIf set to `true`, the service worker will be automatically registered without having to\ncall any methods.\n         ","published":true,"default":false},{"name":"clientsClaim","type":"Boolean","desc":"\nWhether the activated service worker should [take immediate control](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#clients-claim-method)\nof any pages under its scope.\n\nIf this is `false`, the service worker won't have any effect until the next time the page\nis visited/reloaded.\nIf this is `true`, it will take control and start handling events for the current page\n(and any pages under the same scope open in other tabs/windows) as soon it's active.\n","published":true,"default":false,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#clients-claim-method}"}]}},{"name":"href","type":"String","desc":"\nThe service worker script that is [registered](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#navigator-service-worker-register).\nThe script *should* be located at the top level of your site, to ensure that it is able\nto control all the pages on your site.\n\nIt's *strongly* recommended that you create a top-level file named `sw-import.js`\ncontaining only:\n\n`importScripts('bower_components/platinum-sw/service-worker.js');`\n\n(adjust to match the path where your `platinum-sw` element directory can be found).\n\nThis will ensure that your service worker script contains everything needed to play\nnicely with the Service Worker Elements group.\n\n","published":true,"default":"sw-import.js","jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#navigator-service-worker-register}"}]}},{"name":"register","type":"Function","desc":"\nRegisters the service worker based on the configuration options in this element and any\nchild elements.\n\nIf you set the `autoRegister` property to `true`, then this method is called automatically\nat page load.\nIt can be useful to set `autoRegister` to `false` and then explicitly call this method if\nthere are options that are only configured after the page is loaded.\n       ","params":[],"function":true},{"name":"reloadOnInstall","type":"Boolean","desc":"\nWhether the page should be automatically reloaded (via `window.location.reload()`) when\nthe service worker is successfully installed.\n\nWhile it's perfectly valid to continue using a page with a freshly installed service\nworker, it's a common pattern to want to reload it immediately following the install.\nThis ensures that, for example, if you're using a `<platinum-sw-cache>` with an on the\nfly caching strategy, it will get a chance to intercept all the requests needed to render\nyour page and store them in the cache.\n\nIf you don't immediately reload your page, then any resources that were loaded before the\nservice worker was installed (e.g. this `platinum-sw-register.html` file) won't be present\nin the cache until the next time the page is loaded.\n\nNote that this reload will only happen when a service worker is installed for the first\ntime. If the service worker is subsequently updated, it won't trigger another reload.\n         ","published":true,"default":false},{"name":"scope","type":"String","desc":"\nThe scope of the service worker, relative to the registered service worker script.\nAll pages that fall under this scope will be controlled by the registered service worker.\n\nNormally, this would not need to be changed, unless you want the service worker to only\napply to a subset of your site.\n\n","published":true,"default":"./","jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#navigator-service-worker-register}"}]}},{"name":"skipWaiting","type":"Boolean","desc":"\nWhether an updated service worker should [bypass the `waiting` state](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#service-worker-global-scope-skipwaiting)\nand immediately become `active`.\n\nNormally, during an update, the new service worker stays in the\n`waiting` state until the current page and any other tabs/windows that are using the old\nservice worker are unloaded.\n\nIf this is `false`, an updated service worker won't be activated until all instances of\nthe old server worker have been unloaded.\n\nIf this is `true`, an updated service worker will become `active` immediately.\n","published":true,"default":false,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#service-worker-global-scope-skipwaiting}"}]}},{"name":"state","type":"String","desc":"\nThe current state of the service worker registered by this element.\n\nOne of:\n- 'installed'\n- 'updated'\n- 'error'\n- 'unsupported'\n         ","published":true,"notify":true,"readOnly":true},{"name":"_constructServiceWorkerUrl","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_registerServiceWorker","type":"Function","params":[{"name":"serviceWorkerUrl"}],"private":true,"function":true,"default":""},{"name":"_serializeUrlParams","type":"Function","params":[{"name":"params"}],"private":true,"function":true,"default":""},{"name":"_unique","type":"Function","params":[{"name":"arr"}],"private":true,"function":true,"default":""},{"name":"_version","type":"string","desc":" kept in sync with the element's release number.","private":true},{"name":"attached","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"platinum-sw-register","jsdoc":{"tags":[{"tag":"demo","type":null,"name":"demo/index.html","description":"An offline-capable eReader demo."}]},"demos":[{"desc":"An offline-capable eReader demo.","path":"demo/index.html"}]},"platinum-sw-fetch":{"type":"element","desc":"\nThe `<platinum-sw-fetch>` element creates custom [`fetch` event](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#fetch-event-section)\nhandlers for given URL patterns. Possible use cases include:\n\n- Using a special caching strategy for specific URLs.\n- Returning static \"fallback\" responses instead of network errors when a remote API\nis unavailable.\n\nIn short, any scenario in which you'd like a service worker to intercept network\nrequests and provide custom response handling.\n\nIf you'd like a single caching policy applied to all same-origin requests, then an alternative\nto using `<platinum-sw-fetch>` is to use `<platinum-sw-cache>` with the `defaultCacheStategy`\nproperty set.\n\nUnder the hood, the [sw-toolbox](https://github.com/googlechrome/sw-toolbox) library is used\nfor all the request handling logic.\n\n`<platinum-sw-fetch>` needs to be a child element of `<platinum-sw-register>`.\n\nAn example configuration is:\n\n    <platinum-sw-register>\n      <platinum-sw-import-script href=\"custom-fetch-handler.js\"></platinum-sw-import-script>\n      <platinum-sw-fetch handler=\"customFetchHandler\"\n                         path=\"/(.*)/customFetch\"></platinum-sw-fetch>\n    </platinum-sw-register>\n\nThis implies that there's a `custom-fetch-handler.js` file in the same directory as the current\npage, which defines a `sw-toolbox` compliant\n[request handler](https://github.com/googlechrome/sw-toolbox#request-handlers) named\n`customFetchHandler`. This definition is imported using `<platinum-sw-import-script>`. The\n`<platinum-sw-fetch>` element takes care of mapping which request paths are handled by\n`customFetchHandler`.\n\nAnything not matching the `path` pattern is ignored by `<platinum-sw-fetch>`,\nand it's possible to have multiple `<platinum-sw-fetch>` elements that each define different\npaths and different handlers. The path matching is performed top-down, starting with the first\n`<platinum-sw-fetch>` element.\n   ","events":[],"properties":[{"name":"handler","type":"string","desc":"\nThe name of the request handler to use. This should be a `sw-toolbox`-style\n[request handler](https://github.com/googlechrome/sw-toolbox#request-handlers).\n\n`handler` is a `String`, not a `function`, so you're providing the name of a function, not\nthe function itself. It can be a function defined in the\n[`toolbox` scope](https://github.com/googlechrome/sw-toolbox#built-in-handlers)\n(e.g. 'networkFirst', 'fastest', 'networkOnly', etc.) or a function defined in the\n[`ServiceWorkerGlobalScope`](https://slightlyoff.github.io/ServiceWorker/spec/service_worker/#service-worker-global-scope),\nlike a function that is defined in a file that's imported via `platinum-sw-import-script`.\n*\n","published":true,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/GoogleChrome/sw-toolbox#built-in-handlers}"}]}},{"name":"origin","type":"string","desc":"\nBy default, `path` will only match URLs under the current host (i.e. same-origin requests).\nIf you'd like to apply `handler` to cross-origin requests, then use `origin` to specify\nwhich hosts will match. Setting `origin` is optional.\n\n`origin` is a `String`, but it is used internally to construct a\n[`RegExp` object](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions),\nwhich is used for the matching. To properly escape RegExp sequences like `\\.`, it's\nnecessary to add in an extra level of string-escaping first ('\\\\.').\n\nNote that the `origin` value will be matched against the full domain name and the protocol.\nIf you want to match  'http' and 'https', then use 'https?://' at the start of your string.\n\nSome examples:\n- `origin=\"https?://.+\\\\.google\\\\.com\"` → a RegExp that matches `http` or `https` requests\n  made to any domain, as long as it ends in `.google.com`.\n- `origin=\"https://www\\\\.example\\\\.com\" → a RegExp that will only match `https` requests to\n  one domain, `www.example.com`.\n\n","published":true,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/googlechrome/sw-toolbox#toolboxrouterheadurlpattern-handler-options}"}]}},{"name":"path","type":"string","desc":"\nURLs with paths matching `path` will have `handler` applied to them.\n\nBy default, `path` will only match same-origin URLs. If you'd like it to match\ncross-origin URLs, use `path` in conjunction with `origin`.\n\nAs explained in the\n[`sw-toolbox` docs](https://github.com/googlechrome/sw-toolbox#toolboxrouterheadurlpattern-handler-options),\nthe URL path matching is done using the [`path-to-regexp`](https://github.com/pillarjs/path-to-regexp)\nmodule, which is the same logic used in [Express-style routing](http://expressjs.com/guide/routing.html).\n\nIn practice, you need to always use '/' as the first character of your `path`, and then\ncan use '(.*)' as a wildcard.\n\nSome examples:\n- `path=\"/(.*)/customFetch\"` → matches any path that ends with '/customFetch'.\n- `path=\"/customFetch(.*)\"` → matches any path that starts with '/customFetch', optionally\n  followed by other characters.\n\n","published":true,"jsdoc":{"tags":[{"tag":"see","type":null,"description":"{@link https://github.com/pillarjs/path-to-regexp}"}]}},{"name":"_getParameters","type":"Function","params":[{"name":"baseURI"}],"private":true,"function":true,"default":""}],"is":"platinum-sw-fetch","demos":[]}}}
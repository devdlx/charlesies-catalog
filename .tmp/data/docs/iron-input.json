{"elements":[{"type":"element","desc":"\n`<iron-input>` adds two-way binding and custom validators using `Polymer.IronValidatorBehavior`\nto `<input>`.\n\n### Two-way binding\n\nBy default you can only get notified of changes to an `input`'s `value` due to user input:\n\n    <input value=\"{{myValue::input}}\">\n\n`iron-input` adds the `bind-value` property that mirrors the `value` property, and can be used\nfor two-way data binding. `bind-value` will notify if it is changed either by user input or by script.\n\n    <input is=\"iron-input\" bind-value=\"{{myValue}}\">\n\n### Custom validators\n\nYou can use custom validators that implement `Polymer.IronValidatorBehavior` with `<iron-input>`.\n\n    <input is=\"iron-input\" validator=\"my-custom-validator\">\n\n### Stopping invalid input\n\nIt may be desirable to only allow users to enter certain characters. You can use the\n`prevent-invalid-input` and `allowed-pattern` attributes together to accomplish this. This feature\nis separate from validation, and `allowed-pattern` does not affect how the input is validated.\n\n    <!-- only allow characters that match [0-9] -->\n    <input is=\"iron-input\" prevent-invaild-input allowed-pattern=\"[0-9]\">\n\n","events":[{"desc":"\n  The `iron-input-validate` event is fired whenever `validate()` is called.\n  ","jsdoc":{"description":"\n  The `iron-input-validate` event is fired whenever `validate()` is called.\n  ","tags":[{"tag":"event","type":null,"description":"iron-input-validate"}],"orig":"\n  The `iron-input-validate` event is fired whenever `validate()` is called.\n  @event iron-input-validate\n  "},"name":"iron-input-validate","params":[]}],"properties":[{"name":"allowedPattern","type":"String","desc":"\nRegular expression to match valid input characters.\n       ","published":true},{"name":"bindValue","type":"String","desc":"\nUse this property instead of `value` for two-way data binding.\n       ","published":true},{"name":"preventInvalidInput","type":"Boolean","desc":"\nSet to true to prevent the user from entering invalid input. The new input characters are\nmatched with `allowedPattern` if it is set, otherwise it will use the `pattern` attribute if\nset, or the `type` attribute (only supported for `type=number`).\n       ","published":true},{"name":"validate","type":"Function","desc":"\nReturns true if `value` is valid. The validator provided in `validator` will be used first,\nthen any constraints.\n","params":[],"function":true,"return":{"type":"boolean","desc":"True if the value is valid."}},{"name":"_bindValueChanged","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_checkPatternValidity","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_isPrintable","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_onInput","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_onKeypress","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_patternAlreadyChecked","type":"Boolean","published":true,"default":"","private":true},{"name":"_patternRegExp","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_previousValidInput","type":"String","published":true,"default":"","private":true},{"name":"extends","type":"string","private":true,"configuration":true,"default":""},{"name":"listeners","type":"Object","private":true,"configuration":true,"default":""},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"iron-input","behaviors":["Polymer.IronValidatableBehavior"],"jsdoc":{"tags":[{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"demo/index.html","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"}],"behaviors":[],"features":[],"elementsByTagName":{"iron-input":{"type":"element","desc":"\n`<iron-input>` adds two-way binding and custom validators using `Polymer.IronValidatorBehavior`\nto `<input>`.\n\n### Two-way binding\n\nBy default you can only get notified of changes to an `input`'s `value` due to user input:\n\n    <input value=\"{{myValue::input}}\">\n\n`iron-input` adds the `bind-value` property that mirrors the `value` property, and can be used\nfor two-way data binding. `bind-value` will notify if it is changed either by user input or by script.\n\n    <input is=\"iron-input\" bind-value=\"{{myValue}}\">\n\n### Custom validators\n\nYou can use custom validators that implement `Polymer.IronValidatorBehavior` with `<iron-input>`.\n\n    <input is=\"iron-input\" validator=\"my-custom-validator\">\n\n### Stopping invalid input\n\nIt may be desirable to only allow users to enter certain characters. You can use the\n`prevent-invalid-input` and `allowed-pattern` attributes together to accomplish this. This feature\nis separate from validation, and `allowed-pattern` does not affect how the input is validated.\n\n    <!-- only allow characters that match [0-9] -->\n    <input is=\"iron-input\" prevent-invaild-input allowed-pattern=\"[0-9]\">\n\n","events":[{"desc":"\n  The `iron-input-validate` event is fired whenever `validate()` is called.\n  ","jsdoc":{"description":"\n  The `iron-input-validate` event is fired whenever `validate()` is called.\n  ","tags":[{"tag":"event","type":null,"description":"iron-input-validate"}],"orig":"\n  The `iron-input-validate` event is fired whenever `validate()` is called.\n  @event iron-input-validate\n  "},"name":"iron-input-validate","params":[]}],"properties":[{"name":"allowedPattern","type":"String","desc":"\nRegular expression to match valid input characters.\n       ","published":true},{"name":"bindValue","type":"String","desc":"\nUse this property instead of `value` for two-way data binding.\n       ","published":true},{"name":"preventInvalidInput","type":"Boolean","desc":"\nSet to true to prevent the user from entering invalid input. The new input characters are\nmatched with `allowedPattern` if it is set, otherwise it will use the `pattern` attribute if\nset, or the `type` attribute (only supported for `type=number`).\n       ","published":true},{"name":"validate","type":"Function","desc":"\nReturns true if `value` is valid. The validator provided in `validator` will be used first,\nthen any constraints.\n","params":[],"function":true,"return":{"type":"boolean","desc":"True if the value is valid."}},{"name":"_bindValueChanged","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_checkPatternValidity","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_isPrintable","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_onInput","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_onKeypress","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_patternAlreadyChecked","type":"Boolean","published":true,"default":"","private":true},{"name":"_patternRegExp","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_previousValidInput","type":"String","published":true,"default":"","private":true},{"name":"extends","type":"string","private":true,"configuration":true,"default":""},{"name":"listeners","type":"Object","private":true,"configuration":true,"default":""},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"iron-input","behaviors":["Polymer.IronValidatableBehavior"],"jsdoc":{"tags":[{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"demo/index.html","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"}}}
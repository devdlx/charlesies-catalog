{"elements":[{"type":"element","desc":"\n`<paper-input>` is a single-line text field with Material Design styling.\n\n    <paper-input label=\"Input label\"></paper-input>\n\nIt may include an optional error message or character counter.\n\n    <paper-input error-message=\"Invalid input!\" label=\"Input label\"></paper-input>\n    <paper-input char-counter label=\"Input label\"></paper-input>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\n","events":[],"properties":[],"is":"paper-input","behaviors":["Polymer.PaperInputBehavior","Polymer.IronControlState"],"jsdoc":{"tags":[{"tag":"group","type":null,"description":"Paper Elements"},{"tag":"element","type":null,"description":"paper-input"},{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"demo/index.html","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"},{"type":"element","desc":"\n`<paper-input-container>` is a container for a `<label>`, an `<input is=\"iron-input\">` or\n`<iron-autogrow-textarea>` and optional add-on elements such as an error message or character\ncounter, used to implement Material Design text fields.\n\nFor example:\n\n    <paper-input-container>\n      <label>Your name</label>\n      <input is=\"iron-input\">\n    </paper-input-container>\n\n### Listening for input changes\n\nBy default, it listens for changes on the `bind-value` attribute on its children nodes and perform\ntasks such as auto-validating and label styling when the `bind-value` changes. You can configure\nthe attribute it listens to with the `attr-for-value` attribute.\n\n### Using a custom input element\n\nYou can use a custom input element in a `<paper-input-container>`, for example to implement a\ncompound input field like a social security number input. The custom input element should have the\n`paper-input-input` class, have a `notify:true` value property and optionally implements\n`Polymer.IronValidatableBehavior` if it is validatble.\n\n    <paper-input-container attr-for-value=\"ssn-value\">\n      <label>Social security number</label>\n      <ssn-input class=\"paper-input-input\"></ssn-input>\n    </paper-input-container>\n\n### Validation\n\nIf the `auto-validate` attribute is set, the input container will validate the input and update\nthe container styling when the input value changes.\n\n### Add-ons\n\nAdd-ons are child elements of a `<paper-input-container>` with the `add-on` attribute and\nimplements the `Polymer.PaperInputAddonBehavior` behavior. They are notified when the input value\nor validity changes, and may implement functionality such as error messages or character counters.\nThey appear at the bottom of the input.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`\n`--paper-input-container-focus-color` | Label and underline color when the input is focused | `--default-primary-color`\n`--paper-input-container-invalid-color` | Label and underline color when the input is focused | `--google-red-500`\n`--paper-input-container-input-color` | Input foreground color | `--primary-text-color`\n`--paper-input-container` | Mixin applied to the container | `{}`\n`--paper-input-container-label` | Mixin applied to the label | `{}`\n`--paper-input-container-input` | Mixin applied to the input | `{}`\n\nThis element is `display:block` by default, but you can set the `inline` attribute to make it\n`display:inline-block`.\n","events":[],"properties":[{"name":"alwaysFloatLabel","type":"Boolean","desc":"\nSet to true to always float the floating label.\n       ","published":true,"default":false},{"name":"attrForValue","type":"String","desc":"\nThe attribute to listen for value changes on.\n       ","published":true,"default":"bind-value"},{"name":"autoValidate","type":"Boolean","desc":"\nSet to true to auto-validate the input value when it changes.\n       ","published":true,"default":false},{"name":"focused","type":"Boolean","desc":"\nTrue if the input has focus.\n       ","published":true,"readOnly":true,"default":false},{"name":"invalid","type":"Boolean","desc":"\nTrue if the input is invalid. This property is set automatically when the input value\nchanges if auto-validating, or when the `iron-input-valid` event is heard from a child.\n       ","published":true,"default":false},{"name":"noLabelFloat","type":"Boolean","desc":"\nSet to true to disable the floating label. The label disappears when the input value is\nnot null.\n       ","published":true,"default":false},{"name":"updateAddons","type":"Function","desc":"\nCall this to update the state of add-ons.\n","params":[{"name":"state","type":"Object","desc":"Add-on state."}],"function":true},{"name":"_addons","type":"Array","published":true,"private":true,"default":""},{"name":"_boundOnBlur","type":"Function","published":true,"default":"","private":true,"function":true},{"name":"_boundOnFocus","type":"Function","published":true,"default":"","private":true,"function":true},{"name":"_boundOnInput","type":"Function","published":true,"default":"","private":true,"function":true},{"name":"_boundValueChanged","type":"Function","published":true,"default":"","private":true,"function":true},{"name":"_computeAddOnContentClass","type":"Function","params":[{"name":"focused"},{"name":"invalid"}],"private":true,"function":true,"default":""},{"name":"_computeInputContentClass","type":"Function","params":[{"name":"noLabelFloat"},{"name":"alwaysFloatLabel"},{"name":"focused"},{"name":"invalid"},{"name":"_inputHasContent"}],"private":true,"function":true,"default":""},{"name":"_computeUnderlineClass","type":"Function","params":[{"name":"focused"},{"name":"invalid"}],"private":true,"function":true,"default":""},{"name":"_handleValue","type":"Function","params":[{"name":"inputElement"}],"private":true,"function":true,"default":""},{"name":"_inputElement","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_inputHasContent","type":"Boolean","desc":" in polyfill.","published":true,"default":false,"private":true},{"name":"_inputSelector","type":"String","published":true,"default":"","private":true},{"name":"_invalidChanged","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_onAddonAttached","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_onBlur","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_onFocus","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_onInput","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_onIronInputValidate","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_onValueChanged","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_propertyForValue","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_valueChangedEvent","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"attached","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""},{"name":"listeners","type":"Object","private":true,"configuration":true,"default":""},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"paper-input-container","demos":[]},{"type":"element","desc":"\n`<paper-input-error>` is an error message for use with `<paper-input-container>`. The error is\ndisplayed when the `<paper-input-container>` is `invalid`.\n\n    <paper-input-container>\n      <input is=\"iron-input\" pattern=\"[0-9]*\">\n      <paper-input-error>Only numbers are allowed!</paper-input-error>\n    </paper-input-container>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | The foreground color of the error | `--google-red-500`\n`--paper-input-error`                   | Mixin applied to the error        | `{}`\n","events":[],"properties":[{"name":"invalid","type":"Boolean","desc":"\nTrue if the error is showing.\n       ","published":true,"readOnly":true,"reflectToAttribute":"UNKNOWN"},{"name":"update","type":"Function","params":[{"name":"state"}],"function":true,"default":""},{"name":"hostAttributes","type":"Object","private":true,"configuration":true,"default":""}],"is":"paper-input-error","behaviors":["Polymer.PaperInputAddonBehavior"],"demos":[]},{"type":"element","desc":"\n`<paper-input-char-counter>` is a character counter for use with `<paper-input-container>`. It\nshows the number of characters entered in the input and the max length if it is specified.\n\n    <paper-input-container>\n      <input is=\"iron-input\" maxlength=\"20\">\n      <paper-input-char-counter></paper-input-char-counter>\n    </paper-input-container>\n\n### Styling\n\nThe following mixin is available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-char-counter` | Mixin applied to the element | `{}`\n","events":[],"properties":[{"name":"update","type":"Function","params":[{"name":"state"}],"function":true,"default":""},{"name":"_charCounterStr","type":"String","published":true,"default":"","private":true}],"is":"paper-input-char-counter","behaviors":["Polymer.PaperInputAddonBehavior"],"demos":[]},{"type":"element","desc":"\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n","events":[],"properties":[{"name":"_ariaDescribedBy","type":"String","published":true,"private":true,"default":""},{"name":"_ariaDescribedByChanged","type":"Function","params":[{"name":"ariaDescribedBy"}],"private":true,"function":true,"default":""},{"name":"_ariaLabelledBy","type":"String","published":true,"private":true,"default":""},{"name":"_ariaLabelledByChanged","type":"Function","params":[{"name":"ariaLabelledBy"}],"private":true,"function":true,"default":""}],"is":"paper-textarea","behaviors":["Polymer.PaperInputBehavior","Polymer.IronFormElementBehavior"],"demos":[]}],"behaviors":[{"type":"behavior","desc":"\nUse `Polymer.PaperInputBehavior` to implement inputs with `<paper-input-container>`. This\nbehavior is implemented by `<paper-input>`. It exposes a number of properties from\n`<paper-input-container>` and `<input is=\"iron-input\">` and they should be bound in your\ntemplate.\n\nThe input element can be accessed by the `inputElement` property if you need to access\nproperties or methods that are not exposed.\n","events":[],"jsdoc":{"description":"\nUse `Polymer.PaperInputBehavior` to implement inputs with `<paper-input-container>`. This\nbehavior is implemented by `<paper-input>`. It exposes a number of properties from\n`<paper-input-container>` and `<input is=\"iron-input\">` and they should be bound in your\ntemplate.\n\nThe input element can be accessed by the `inputElement` property if you need to access\nproperties or methods that are not exposed.\n","tags":[{"tag":"polymerBehavior","type":null,"name":"Polymer.PaperInputBehavior","description":null}],"orig":"*\n   * Use `Polymer.PaperInputBehavior` to implement inputs with `<paper-input-container>`. This\n   * behavior is implemented by `<paper-input>`. It exposes a number of properties from\n   * `<paper-input-container>` and `<input is=\"iron-input\">` and they should be bound in your\n   * template.\n   *\n   * The input element can be accessed by the `inputElement` property if you need to access\n   * properties or methods that are not exposed.\n   * @polymerBehavior Polymer.PaperInputBehavior\n   "},"demos":[],"is":"Polymer.PaperInputBehavior","properties":[{"name":"allowedPattern","type":"String","desc":"\nSet this to specify the pattern allowed by `preventInvalidInput`. Bind this to the\n`<input is=\"iron-input\">`'s `allowedPattern` property.\n       ","published":true,"jsdoc":{"description":"\nSet this to specify the pattern allowed by `preventInvalidInput`. Bind this to the\n`<input is=\"iron-input\">`'s `allowedPattern` property.\n       ","tags":[],"orig":"*\n       * Set this to specify the pattern allowed by `preventInvalidInput`. Bind this to the\n       * `<input is=\"iron-input\">`'s `allowedPattern` property.\n       "}},{"name":"alwaysFloatLabel","type":"Boolean","desc":"\nSet to true to always float the label. Bind this to the `<paper-input-container>`'s\n`alwaysFloatLabel` property.\n       ","published":true,"default":false,"jsdoc":{"description":"\nSet to true to always float the label. Bind this to the `<paper-input-container>`'s\n`alwaysFloatLabel` property.\n       ","tags":[],"orig":"*\n       * Set to true to always float the label. Bind this to the `<paper-input-container>`'s\n       * `alwaysFloatLabel` property.\n       "}},{"name":"autoValidate","type":"Boolean","desc":"\nSet to true to auto-validate the input value. Bind this to the `<paper-input-container>`'s\n`autoValidate` property.\n       ","published":true,"default":false,"jsdoc":{"description":"\nSet to true to auto-validate the input value. Bind this to the `<paper-input-container>`'s\n`autoValidate` property.\n       ","tags":[],"orig":"*\n       * Set to true to auto-validate the input value. Bind this to the `<paper-input-container>`'s\n       * `autoValidate` property.\n       "}},{"name":"autocomplete","type":"String","desc":"\nBind this to the `<input is=\"iron-input\">`'s `autocomplete` property.\n       ","published":true,"default":"off","jsdoc":{"description":"\nBind this to the `<input is=\"iron-input\">`'s `autocomplete` property.\n       ","tags":[],"orig":"*\n       * Bind this to the `<input is=\"iron-input\">`'s `autocomplete` property.\n       "}},{"name":"autofocus","type":"Boolean","desc":"\nBind this to the `<input is=\"iron-input\">`'s `autofocus` property.\n       ","published":true,"jsdoc":{"description":"\nBind this to the `<input is=\"iron-input\">`'s `autofocus` property.\n       ","tags":[],"orig":"*\n       * Bind this to the `<input is=\"iron-input\">`'s `autofocus` property.\n       "}},{"name":"charCounter","type":"Boolean","desc":"\nSet to true to show a character counter.\n       ","published":true,"default":false,"jsdoc":{"description":"\nSet to true to show a character counter.\n       ","tags":[],"orig":"*\n       * Set to true to show a character counter.\n       "}},{"name":"disabled","type":"Boolean","desc":"\nSet to true to disable this input. Bind this to both the `<paper-input-container>`'s\nand the input's `disabled` property.\n       ","published":true,"default":false,"jsdoc":{"description":"\nSet to true to disable this input. Bind this to both the `<paper-input-container>`'s\nand the input's `disabled` property.\n       ","tags":[],"orig":"*\n       * Set to true to disable this input. Bind this to both the `<paper-input-container>`'s\n       * and the input's `disabled` property.\n       "}},{"name":"errorMessage","type":"String","desc":"\nThe error message to display when the input is invalid. Bind this to the\n`<paper-input-error>`'s content, if using.\n       ","published":true,"jsdoc":{"description":"\nThe error message to display when the input is invalid. Bind this to the\n`<paper-input-error>`'s content, if using.\n       ","tags":[],"orig":"*\n       * The error message to display when the input is invalid. Bind this to the\n       * `<paper-input-error>`'s content, if using.\n       "}},{"name":"inputElement","type":"Function","desc":"\nReturns a reference to the input element.\n     ","params":[],"jsdoc":{"description":"\nReturns a reference to the input element.\n     ","tags":[],"orig":"*\n     * Returns a reference to the input element.\n     "},"function":true},{"name":"inputmode","type":"String","desc":"\nBind this to the `<input is=\"iron-input\">`'s `inputmode` property.\n       ","published":true,"jsdoc":{"description":"\nBind this to the `<input is=\"iron-input\">`'s `inputmode` property.\n       ","tags":[],"orig":"*\n       * Bind this to the `<input is=\"iron-input\">`'s `inputmode` property.\n       "}},{"name":"invalid","type":"Boolean","desc":"\nReturns true if the value is invalid. Bind this to both the `<paper-input-container>`'s\nand the input's `invalid` property.\n       ","published":true,"default":false,"jsdoc":{"description":"\nReturns true if the value is invalid. Bind this to both the `<paper-input-container>`'s\nand the input's `invalid` property.\n       ","tags":[],"orig":"*\n       * Returns true if the value is invalid. Bind this to both the `<paper-input-container>`'s\n       * and the input's `invalid` property.\n       "}},{"name":"label","type":"String","desc":"\nThe label for this input. Bind this to `<paper-input-container>`'s `label` property.\n       ","published":true,"jsdoc":{"description":"\nThe label for this input. Bind this to `<paper-input-container>`'s `label` property.\n       ","tags":[],"orig":"*\n       * The label for this input. Bind this to `<paper-input-container>`'s `label` property.\n       "}},{"name":"list","type":"String","desc":"\nThe datalist of the input (if any). This should match the id of an existing <datalist>. Bind this\nto the `<input is=\"iron-input\">`'s `list` property.\n       ","published":true,"jsdoc":{"description":"\nThe datalist of the input (if any). This should match the id of an existing <datalist>. Bind this\nto the `<input is=\"iron-input\">`'s `list` property.\n       ","tags":[],"orig":"*\n       * The datalist of the input (if any). This should match the id of an existing <datalist>. Bind this\n       * to the `<input is=\"iron-input\">`'s `list` property.\n       "}},{"name":"maxlength","type":"Number","desc":"\nThe maximum length of the input value. Bind this to the `<input is=\"iron-input\">`'s\n`maxlength` property.\n       ","published":true,"jsdoc":{"description":"\nThe maximum length of the input value. Bind this to the `<input is=\"iron-input\">`'s\n`maxlength` property.\n       ","tags":[],"orig":"*\n       * The maximum length of the input value. Bind this to the `<input is=\"iron-input\">`'s\n       * `maxlength` property.\n       "}},{"name":"minlength","type":"Number","desc":"\nBind this to the `<input is=\"iron-input\">`'s `minlength` property.\n       ","published":true,"jsdoc":{"description":"\nBind this to the `<input is=\"iron-input\">`'s `minlength` property.\n       ","tags":[],"orig":"*\n       * Bind this to the `<input is=\"iron-input\">`'s `minlength` property.\n       "}},{"name":"name","type":"String","desc":"\nBind this to the `<input is=\"iron-input\">`'s `name` property.\n       ","published":true,"jsdoc":{"description":"\nBind this to the `<input is=\"iron-input\">`'s `name` property.\n       ","tags":[],"orig":"*\n       * Bind this to the `<input is=\"iron-input\">`'s `name` property.\n       "}},{"name":"noLabelFloat","type":"Boolean","desc":"\nSet to true to disable the floating label. Bind this to the `<paper-input-container>`'s\n`noLabelFloat` property.\n       ","published":true,"default":false,"jsdoc":{"description":"\nSet to true to disable the floating label. Bind this to the `<paper-input-container>`'s\n`noLabelFloat` property.\n       ","tags":[],"orig":"*\n       * Set to true to disable the floating label. Bind this to the `<paper-input-container>`'s\n       * `noLabelFloat` property.\n       "}},{"name":"pattern","type":"String","desc":"\nA pattern to validate the `input` with. Bind this to the `<input is=\"iron-input\">`'s\n`pattern` property.\n       ","published":true,"jsdoc":{"description":"\nA pattern to validate the `input` with. Bind this to the `<input is=\"iron-input\">`'s\n`pattern` property.\n       ","tags":[],"orig":"*\n       * A pattern to validate the `input` with. Bind this to the `<input is=\"iron-input\">`'s\n       * `pattern` property.\n       "}},{"name":"placeholder","type":"String","desc":"\nA placeholder string in addition to the label. If this is set, the label will always float.\n       ","published":true,"default":"","jsdoc":{"description":"\nA placeholder string in addition to the label. If this is set, the label will always float.\n       ","tags":[],"orig":"*\n       * A placeholder string in addition to the label. If this is set, the label will always float.\n       "}},{"name":"preventInvalidInput","type":"Boolean","desc":"\nSet to true to prevent the user from entering invalid input. Bind this to the\n`<input is=\"iron-input\">`'s `preventInvalidInput` property.\n       ","published":true,"jsdoc":{"description":"\nSet to true to prevent the user from entering invalid input. Bind this to the\n`<input is=\"iron-input\">`'s `preventInvalidInput` property.\n       ","tags":[],"orig":"*\n       * Set to true to prevent the user from entering invalid input. Bind this to the\n       * `<input is=\"iron-input\">`'s `preventInvalidInput` property.\n       "}},{"name":"readonly","type":"Boolean","desc":"\nBind this to the `<input is=\"iron-input\">`'s `readonly` property.\n       ","published":true,"default":false,"jsdoc":{"description":"\nBind this to the `<input is=\"iron-input\">`'s `readonly` property.\n       ","tags":[],"orig":"*\n       * Bind this to the `<input is=\"iron-input\">`'s `readonly` property.\n       "}},{"name":"required","type":"Boolean","desc":"\nSet to true to mark the input as required. Bind this to the `<input is=\"iron-input\">`'s\n`required` property.\n       ","published":true,"default":false,"jsdoc":{"description":"\nSet to true to mark the input as required. Bind this to the `<input is=\"iron-input\">`'s\n`required` property.\n       ","tags":[],"orig":"*\n       * Set to true to mark the input as required. Bind this to the `<input is=\"iron-input\">`'s\n       * `required` property.\n       "}},{"name":"size","type":"Number","desc":"\nBind this to the `<input is=\"iron-input\">`'s `size` property.\n       ","published":true,"jsdoc":{"description":"\nBind this to the `<input is=\"iron-input\">`'s `size` property.\n       ","tags":[],"orig":"*\n       * Bind this to the `<input is=\"iron-input\">`'s `size` property.\n       "}},{"name":"type","type":"String","desc":"\nThe type of the input. The supported types are `text`, `number` and `password`. Bind this\nto the `<input is=\"iron-input\">`'s `type` property.\n       ","published":true,"jsdoc":{"description":"\nThe type of the input. The supported types are `text`, `number` and `password`. Bind this\nto the `<input is=\"iron-input\">`'s `type` property.\n       ","tags":[],"orig":"*\n       * The type of the input. The supported types are `text`, `number` and `password`. Bind this\n       * to the `<input is=\"iron-input\">`'s `type` property.\n       "}},{"name":"updateValueAndPreserveCaret","type":"Function","desc":"\nRestores the cursor to its original position after updating the value.\n","params":[{"name":"newValue","type":"string","desc":"The value that should be saved."}],"jsdoc":{"description":"\nRestores the cursor to its original position after updating the value.\n","tags":[{"tag":"param","type":"string","name":"newValue","description":"The value that should be saved."}],"orig":"*\n     * Restores the cursor to its original position after updating the value.\n     * @param {string} newValue The value that should be saved.\n     "},"function":true},{"name":"validate","type":"Function","desc":"\nValidates the input element and sets an error style if needed.\n     ","params":[],"jsdoc":{"description":"\nValidates the input element and sets an error style if needed.\n     ","tags":[],"orig":"*\n     * Validates the input element and sets an error style if needed.\n     "},"function":true},{"name":"validator","type":"String","desc":"\nName of the validator to use. Bind this to the `<input is=\"iron-input\">`'s `validator`\nproperty.\n       ","published":true,"jsdoc":{"description":"\nName of the validator to use. Bind this to the `<input is=\"iron-input\">`'s `validator`\nproperty.\n       ","tags":[],"orig":"*\n       * Name of the validator to use. Bind this to the `<input is=\"iron-input\">`'s `validator`\n       * property.\n       "}},{"name":"value","type":"String","desc":"\nThe value for this input. Bind this to the `<input is=\"iron-input\">`'s `bindValue`\nproperty, or the value property of your input that is `notify:true`.\n       ","published":true,"notify":true,"jsdoc":{"description":"\nThe value for this input. Bind this to the `<input is=\"iron-input\">`'s `bindValue`\nproperty, or the value property of your input that is `notify:true`.\n       ","tags":[],"orig":"*\n       * The value for this input. Bind this to the `<input is=\"iron-input\">`'s `bindValue`\n       * property, or the value property of your input that is `notify:true`.\n       "}},{"name":"_appendStringWithSpace","type":"Function","params":[{"name":"str"},{"name":"more"}],"private":true,"function":true,"default":""},{"name":"_ariaDescribedBy","type":"String","published":true,"default":"","private":true},{"name":"_computeAlwaysFloatLabel","type":"Function","params":[{"name":"alwaysFloatLabel"},{"name":"placeholder"}],"private":true,"function":true,"default":""},{"name":"_onAddonAttached","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_updateAriaLabelledBy","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"attached","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""},{"name":"listeners","type":"Object","private":true,"configuration":true,"default":""}]},{"type":"behavior","desc":"\nUse `Polymer.PaperInputAddonBehavior` to implement an add-on for `<paper-input-container>`. A\nadd-on appears below the input, and may display information based on the input value and\nvalidity such as a character counter or an error message.\n","events":[],"jsdoc":{"description":"\nUse `Polymer.PaperInputAddonBehavior` to implement an add-on for `<paper-input-container>`. A\nadd-on appears below the input, and may display information based on the input value and\nvalidity such as a character counter or an error message.\n","tags":[{"tag":"polymerBehavior","type":null,"name":null,"description":null}],"orig":"*\n   * Use `Polymer.PaperInputAddonBehavior` to implement an add-on for `<paper-input-container>`. A\n   * add-on appears below the input, and may display information based on the input value and\n   * validity such as a character counter or an error message.\n   * @polymerBehavior\n   "},"demos":[],"is":"Polymer.PaperInputAddonBehavior","properties":[{"name":"update","type":"Function","desc":"\nThe function called by `<paper-input-container>` when the input value or validity changes.\n","params":[{"name":"state","type":"{inputElement: (Node|undefined), value: (string|undefined), invalid: (boolean|undefined)}","desc":"All properties are optional -\n    inputElement: The input element.\n    value: The input value.\n    invalid: True if the input value is invalid."}],"jsdoc":{"description":"\nThe function called by `<paper-input-container>` when the input value or validity changes.\n","tags":[{"tag":"param","type":"{inputElement: (Node|undefined), value: (string|undefined), invalid: (boolean|undefined)}","name":"state","description":"All properties are optional -\n    inputElement: The input element.\n    value: The input value.\n    invalid: True if the input value is invalid."}],"orig":"*\n     * The function called by `<paper-input-container>` when the input value or validity changes.\n     * @param {{\n     *   inputElement: (Node|undefined),\n     *   value: (string|undefined),\n     *   invalid: (boolean|undefined)\n     * }} state All properties are optional -\n     *     inputElement: The input element.\n     *     value: The input value.\n     *     invalid: True if the input value is invalid.\n     "},"function":true},{"name":"attached","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""},{"name":"hostAttributes","type":"Object","private":true,"configuration":true,"default":""}]}],"features":[],"elementsByTagName":{"paper-input":{"type":"element","desc":"\n`<paper-input>` is a single-line text field with Material Design styling.\n\n    <paper-input label=\"Input label\"></paper-input>\n\nIt may include an optional error message or character counter.\n\n    <paper-input error-message=\"Invalid input!\" label=\"Input label\"></paper-input>\n    <paper-input char-counter label=\"Input label\"></paper-input>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n\n","events":[],"properties":[],"is":"paper-input","behaviors":["Polymer.PaperInputBehavior","Polymer.IronControlState"],"jsdoc":{"tags":[{"tag":"group","type":null,"description":"Paper Elements"},{"tag":"element","type":null,"description":"paper-input"},{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"demo","type":null,"name":"demo/index.html","description":""}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"},"paper-input-container":{"type":"element","desc":"\n`<paper-input-container>` is a container for a `<label>`, an `<input is=\"iron-input\">` or\n`<iron-autogrow-textarea>` and optional add-on elements such as an error message or character\ncounter, used to implement Material Design text fields.\n\nFor example:\n\n    <paper-input-container>\n      <label>Your name</label>\n      <input is=\"iron-input\">\n    </paper-input-container>\n\n### Listening for input changes\n\nBy default, it listens for changes on the `bind-value` attribute on its children nodes and perform\ntasks such as auto-validating and label styling when the `bind-value` changes. You can configure\nthe attribute it listens to with the `attr-for-value` attribute.\n\n### Using a custom input element\n\nYou can use a custom input element in a `<paper-input-container>`, for example to implement a\ncompound input field like a social security number input. The custom input element should have the\n`paper-input-input` class, have a `notify:true` value property and optionally implements\n`Polymer.IronValidatableBehavior` if it is validatble.\n\n    <paper-input-container attr-for-value=\"ssn-value\">\n      <label>Social security number</label>\n      <ssn-input class=\"paper-input-input\"></ssn-input>\n    </paper-input-container>\n\n### Validation\n\nIf the `auto-validate` attribute is set, the input container will validate the input and update\nthe container styling when the input value changes.\n\n### Add-ons\n\nAdd-ons are child elements of a `<paper-input-container>` with the `add-on` attribute and\nimplements the `Polymer.PaperInputAddonBehavior` behavior. They are notified when the input value\nor validity changes, and may implement functionality such as error messages or character counters.\nThey appear at the bottom of the input.\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-color` | Label and underline color when the input is not focused | `--secondary-text-color`\n`--paper-input-container-focus-color` | Label and underline color when the input is focused | `--default-primary-color`\n`--paper-input-container-invalid-color` | Label and underline color when the input is focused | `--google-red-500`\n`--paper-input-container-input-color` | Input foreground color | `--primary-text-color`\n`--paper-input-container` | Mixin applied to the container | `{}`\n`--paper-input-container-label` | Mixin applied to the label | `{}`\n`--paper-input-container-input` | Mixin applied to the input | `{}`\n\nThis element is `display:block` by default, but you can set the `inline` attribute to make it\n`display:inline-block`.\n","events":[],"properties":[{"name":"alwaysFloatLabel","type":"Boolean","desc":"\nSet to true to always float the floating label.\n       ","published":true,"default":false},{"name":"attrForValue","type":"String","desc":"\nThe attribute to listen for value changes on.\n       ","published":true,"default":"bind-value"},{"name":"autoValidate","type":"Boolean","desc":"\nSet to true to auto-validate the input value when it changes.\n       ","published":true,"default":false},{"name":"focused","type":"Boolean","desc":"\nTrue if the input has focus.\n       ","published":true,"readOnly":true,"default":false},{"name":"invalid","type":"Boolean","desc":"\nTrue if the input is invalid. This property is set automatically when the input value\nchanges if auto-validating, or when the `iron-input-valid` event is heard from a child.\n       ","published":true,"default":false},{"name":"noLabelFloat","type":"Boolean","desc":"\nSet to true to disable the floating label. The label disappears when the input value is\nnot null.\n       ","published":true,"default":false},{"name":"updateAddons","type":"Function","desc":"\nCall this to update the state of add-ons.\n","params":[{"name":"state","type":"Object","desc":"Add-on state."}],"function":true},{"name":"_addons","type":"Array","published":true,"private":true,"default":""},{"name":"_boundOnBlur","type":"Function","published":true,"default":"","private":true,"function":true},{"name":"_boundOnFocus","type":"Function","published":true,"default":"","private":true,"function":true},{"name":"_boundOnInput","type":"Function","published":true,"default":"","private":true,"function":true},{"name":"_boundValueChanged","type":"Function","published":true,"default":"","private":true,"function":true},{"name":"_computeAddOnContentClass","type":"Function","params":[{"name":"focused"},{"name":"invalid"}],"private":true,"function":true,"default":""},{"name":"_computeInputContentClass","type":"Function","params":[{"name":"noLabelFloat"},{"name":"alwaysFloatLabel"},{"name":"focused"},{"name":"invalid"},{"name":"_inputHasContent"}],"private":true,"function":true,"default":""},{"name":"_computeUnderlineClass","type":"Function","params":[{"name":"focused"},{"name":"invalid"}],"private":true,"function":true,"default":""},{"name":"_handleValue","type":"Function","params":[{"name":"inputElement"}],"private":true,"function":true,"default":""},{"name":"_inputElement","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_inputHasContent","type":"Boolean","desc":" in polyfill.","published":true,"default":false,"private":true},{"name":"_inputSelector","type":"String","published":true,"default":"","private":true},{"name":"_invalidChanged","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_onAddonAttached","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_onBlur","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_onFocus","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_onInput","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_onIronInputValidate","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_onValueChanged","type":"Function","params":[{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_propertyForValue","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_valueChangedEvent","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"attached","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""},{"name":"listeners","type":"Object","private":true,"configuration":true,"default":""},{"name":"ready","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"paper-input-container","demos":[]},"paper-input-error":{"type":"element","desc":"\n`<paper-input-error>` is an error message for use with `<paper-input-container>`. The error is\ndisplayed when the `<paper-input-container>` is `invalid`.\n\n    <paper-input-container>\n      <input is=\"iron-input\" pattern=\"[0-9]*\">\n      <paper-input-error>Only numbers are allowed!</paper-input-error>\n    </paper-input-container>\n\n### Styling\n\nThe following custom properties and mixins are available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-container-invalid-color` | The foreground color of the error | `--google-red-500`\n`--paper-input-error`                   | Mixin applied to the error        | `{}`\n","events":[],"properties":[{"name":"invalid","type":"Boolean","desc":"\nTrue if the error is showing.\n       ","published":true,"readOnly":true,"reflectToAttribute":"UNKNOWN"},{"name":"update","type":"Function","params":[{"name":"state"}],"function":true,"default":""},{"name":"hostAttributes","type":"Object","private":true,"configuration":true,"default":""}],"is":"paper-input-error","behaviors":["Polymer.PaperInputAddonBehavior"],"demos":[]},"paper-input-char-counter":{"type":"element","desc":"\n`<paper-input-char-counter>` is a character counter for use with `<paper-input-container>`. It\nshows the number of characters entered in the input and the max length if it is specified.\n\n    <paper-input-container>\n      <input is=\"iron-input\" maxlength=\"20\">\n      <paper-input-char-counter></paper-input-char-counter>\n    </paper-input-container>\n\n### Styling\n\nThe following mixin is available for styling:\n\nCustom property | Description | Default\n----------------|-------------|----------\n`--paper-input-char-counter` | Mixin applied to the element | `{}`\n","events":[],"properties":[{"name":"update","type":"Function","params":[{"name":"state"}],"function":true,"default":""},{"name":"_charCounterStr","type":"String","published":true,"default":"","private":true}],"is":"paper-input-char-counter","behaviors":["Polymer.PaperInputAddonBehavior"],"demos":[]},"paper-textarea":{"type":"element","desc":"\n`<paper-textarea>` is a multi-line text field with Material Design styling.\n\n    <paper-textarea label=\"Textarea label\"></paper-textarea>\n\nSee `Polymer.PaperInputBehavior` for more API docs.\n\n### Validation\n\nCurrently only `required` and `maxlength` validation is supported.\n\n### Styling\n\nSee `Polymer.PaperInputContainer` for a list of custom properties used to\nstyle this element.\n","events":[],"properties":[{"name":"_ariaDescribedBy","type":"String","published":true,"private":true,"default":""},{"name":"_ariaDescribedByChanged","type":"Function","params":[{"name":"ariaDescribedBy"}],"private":true,"function":true,"default":""},{"name":"_ariaLabelledBy","type":"String","published":true,"private":true,"default":""},{"name":"_ariaLabelledByChanged","type":"Function","params":[{"name":"ariaLabelledBy"}],"private":true,"function":true,"default":""}],"is":"paper-textarea","behaviors":["Polymer.PaperInputBehavior","Polymer.IronFormElementBehavior"],"demos":[]}}}
{"elements":[{"type":"element","desc":"\n`iron-meta` is a generic element you can use for sharing information across the DOM tree.\nIt uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such that any\ninstance of iron-meta has access to the shared\ninformation. You can use `iron-meta` to share whatever you want (or create an extension\n[like x-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an import,\nor constructed in any way you see fit. The only requirement is that you create them\nbefore you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    <iron-meta key=\"info\" value=\"foo/bar\"></iron-meta>\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info').getAttribute('value').\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info').getAttribute('value');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    <iron-meta id=\"meta\"></iron-meta>\n    ...\n    this.$.meta.byKey('info').getAttribute('value');\n\n","events":[],"properties":[{"name":"byKey","type":"Function","desc":"\nRetrieves meta data value by key.\n\n","params":[{"name":"key","type":"string","desc":"The key of the meta-data to be returned."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"byKey","description":null}]},"function":true,"return":{"type":"*","desc":null}},{"name":"factoryImpl","type":"Function","desc":"\nOnly runs if someone invokes the factory/constructor directly\ne.g. `new Polymer.IronMeta()`\n       ","params":[{"name":"config"}],"function":true},{"name":"key","type":"String","desc":"\nThe key used to store `value` under the `type` namespace.\n         ","published":true},{"name":"list","type":"Array","desc":"\nArray of all meta-data values for the given type.\n         ","published":true,"notify":true},{"name":"self","type":"Boolean","desc":"\nIf true, `value` is set to the iron-meta instance itself.\n         ","published":true},{"name":"type","type":"String","desc":"\nThe type of meta-data.  All meta-data of the same type is stored\ntogether.\n         ","published":true,"default":"default"},{"name":"value","type":"Object","desc":"\nThe meta-data to store or retrieve.\n         ","published":true,"notify":true},{"name":"_keyChanged","type":"Function","params":[{"name":"key"},{"name":"old"}],"private":true,"function":true,"default":""},{"name":"_register","type":"Function","params":[{"name":"key"},{"name":"value"},{"name":"data"},{"name":"list"}],"private":true,"function":true,"default":""},{"name":"_registerKeyValue","type":"Function","params":[{"name":"key"},{"name":"value"}],"private":true,"function":true,"default":""},{"name":"_resetRegistration","type":"Function","params":[{"name":"oldKey"}],"private":true,"function":true,"default":""},{"name":"_selfChanged","type":"Function","params":[{"name":"self"}],"private":true,"function":true,"default":""},{"name":"_typeChanged","type":"Function","params":[{"name":"type"}],"private":true,"function":true,"default":""},{"name":"_unregister","type":"Function","params":[{"name":"key"},{"name":"data"},{"name":"list"}],"private":true,"function":true,"default":""},{"name":"_unregisterKey","type":"Function","params":[{"name":"key"}],"private":true,"function":true,"default":""},{"name":"_valueChanged","type":"Function","params":[{"name":"value"}],"private":true,"function":true,"default":""},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"iron-meta","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Iron Elements"},{"tag":"demo","type":null,"name":"demo/index.html","description":""},{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"element","type":null,"description":"iron-meta"}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"},{"type":"element","desc":"\n`iron-meta` is a generic element you can use for sharing information across the DOM tree.\nIt uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such that any\ninstance of iron-meta has access to the shared\ninformation. You can use `iron-meta` to share whatever you want (or create an extension\n[like x-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an import,\nor constructed in any way you see fit. The only requirement is that you create them\nbefore you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    <iron-meta key=\"info\" value=\"foo/bar\"></iron-meta>\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info').getAttribute('value').\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info').getAttribute('value');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    <iron-meta id=\"meta\"></iron-meta>\n    ...\n    this.$.meta.byKey('info').getAttribute('value');\n\n","events":[],"properties":[{"name":"byKey","type":"Function","desc":"\nRetrieves meta data value by key.\n","params":[{"name":"key","type":"string","desc":"The key of the meta-data to be returned."}],"function":true,"return":{"type":"*","desc":null}},{"name":"factoryImpl","type":"Function","desc":"\nActually a factory method, not a true constructor. Only runs if\nsomeone invokes it directly (via `new Polymer.IronMeta()`);\n       ","params":[{"name":"config"}],"function":true},{"name":"key","type":"String","desc":"\nSpecifies a key to use for retrieving `value` from the `type`\nnamespace.\n         ","published":true},{"name":"list","type":"Array","desc":"\nArray of all meta-data values for the given type.\n         ","published":true,"notify":true},{"name":"type","type":"String","desc":"\nThe type of meta-data.  All meta-data of the same type is stored\ntogether.\n         ","published":true,"default":"default"},{"name":"value","type":"Object","desc":"\nThe meta-data to store or retrieve.\n         ","published":true,"notify":true,"readOnly":true},{"name":"_keyChanged","type":"Function","params":[{"name":"key"}],"private":true,"function":true,"default":""},{"name":"_typeChanged","type":"Function","params":[{"name":"type"}],"private":true,"function":true,"default":""},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"iron-meta-query","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Iron Elements"},{"tag":"demo","type":null,"name":"demo/index.html","description":""},{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"element","type":null,"description":"iron-meta"}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"}],"behaviors":[],"features":[],"elementsByTagName":{"iron-meta":{"type":"element","desc":"\n`iron-meta` is a generic element you can use for sharing information across the DOM tree.\nIt uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such that any\ninstance of iron-meta has access to the shared\ninformation. You can use `iron-meta` to share whatever you want (or create an extension\n[like x-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an import,\nor constructed in any way you see fit. The only requirement is that you create them\nbefore you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    <iron-meta key=\"info\" value=\"foo/bar\"></iron-meta>\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info').getAttribute('value').\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info').getAttribute('value');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    <iron-meta id=\"meta\"></iron-meta>\n    ...\n    this.$.meta.byKey('info').getAttribute('value');\n\n","events":[],"properties":[{"name":"byKey","type":"Function","desc":"\nRetrieves meta data value by key.\n\n","params":[{"name":"key","type":"string","desc":"The key of the meta-data to be returned."}],"jsdoc":{"tags":[{"tag":"method","type":null,"name":"byKey","description":null}]},"function":true,"return":{"type":"*","desc":null}},{"name":"factoryImpl","type":"Function","desc":"\nOnly runs if someone invokes the factory/constructor directly\ne.g. `new Polymer.IronMeta()`\n       ","params":[{"name":"config"}],"function":true},{"name":"key","type":"String","desc":"\nThe key used to store `value` under the `type` namespace.\n         ","published":true},{"name":"list","type":"Array","desc":"\nArray of all meta-data values for the given type.\n         ","published":true,"notify":true},{"name":"self","type":"Boolean","desc":"\nIf true, `value` is set to the iron-meta instance itself.\n         ","published":true},{"name":"type","type":"String","desc":"\nThe type of meta-data.  All meta-data of the same type is stored\ntogether.\n         ","published":true,"default":"default"},{"name":"value","type":"Object","desc":"\nThe meta-data to store or retrieve.\n         ","published":true,"notify":true},{"name":"_keyChanged","type":"Function","params":[{"name":"key"},{"name":"old"}],"private":true,"function":true,"default":""},{"name":"_register","type":"Function","params":[{"name":"key"},{"name":"value"},{"name":"data"},{"name":"list"}],"private":true,"function":true,"default":""},{"name":"_registerKeyValue","type":"Function","params":[{"name":"key"},{"name":"value"}],"private":true,"function":true,"default":""},{"name":"_resetRegistration","type":"Function","params":[{"name":"oldKey"}],"private":true,"function":true,"default":""},{"name":"_selfChanged","type":"Function","params":[{"name":"self"}],"private":true,"function":true,"default":""},{"name":"_typeChanged","type":"Function","params":[{"name":"type"}],"private":true,"function":true,"default":""},{"name":"_unregister","type":"Function","params":[{"name":"key"},{"name":"data"},{"name":"list"}],"private":true,"function":true,"default":""},{"name":"_unregisterKey","type":"Function","params":[{"name":"key"}],"private":true,"function":true,"default":""},{"name":"_valueChanged","type":"Function","params":[{"name":"value"}],"private":true,"function":true,"default":""},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"iron-meta","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Iron Elements"},{"tag":"demo","type":null,"name":"demo/index.html","description":""},{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"element","type":null,"description":"iron-meta"}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"},"iron-meta-query":{"type":"element","desc":"\n`iron-meta` is a generic element you can use for sharing information across the DOM tree.\nIt uses [monostate pattern](http://c2.com/cgi/wiki?MonostatePattern) such that any\ninstance of iron-meta has access to the shared\ninformation. You can use `iron-meta` to share whatever you want (or create an extension\n[like x-meta] for enhancements).\n\nThe `iron-meta` instances containing your actual data can be loaded in an import,\nor constructed in any way you see fit. The only requirement is that you create them\nbefore you try to access them.\n\nExamples:\n\nIf I create an instance like this:\n\n    <iron-meta key=\"info\" value=\"foo/bar\"></iron-meta>\n\nNote that value=\"foo/bar\" is the metadata I've defined. I could define more\nattributes or use child nodes to define additional metadata.\n\nNow I can access that element (and it's metadata) from any iron-meta instance\nvia the byKey method, e.g.\n\n    meta.byKey('info').getAttribute('value').\n\nPure imperative form would be like:\n\n    document.createElement('iron-meta').byKey('info').getAttribute('value');\n\nOr, in a Polymer element, you can include a meta in your template:\n\n    <iron-meta id=\"meta\"></iron-meta>\n    ...\n    this.$.meta.byKey('info').getAttribute('value');\n\n","events":[],"properties":[{"name":"byKey","type":"Function","desc":"\nRetrieves meta data value by key.\n","params":[{"name":"key","type":"string","desc":"The key of the meta-data to be returned."}],"function":true,"return":{"type":"*","desc":null}},{"name":"factoryImpl","type":"Function","desc":"\nActually a factory method, not a true constructor. Only runs if\nsomeone invokes it directly (via `new Polymer.IronMeta()`);\n       ","params":[{"name":"config"}],"function":true},{"name":"key","type":"String","desc":"\nSpecifies a key to use for retrieving `value` from the `type`\nnamespace.\n         ","published":true},{"name":"list","type":"Array","desc":"\nArray of all meta-data values for the given type.\n         ","published":true,"notify":true},{"name":"type","type":"String","desc":"\nThe type of meta-data.  All meta-data of the same type is stored\ntogether.\n         ","published":true,"default":"default"},{"name":"value","type":"Object","desc":"\nThe meta-data to store or retrieve.\n         ","published":true,"notify":true,"readOnly":true},{"name":"_keyChanged","type":"Function","params":[{"name":"key"}],"private":true,"function":true,"default":""},{"name":"_typeChanged","type":"Function","params":[{"name":"type"}],"private":true,"function":true,"default":""},{"name":"created","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}],"is":"iron-meta-query","jsdoc":{"tags":[{"tag":"group","type":null,"description":"Iron Elements"},{"tag":"demo","type":null,"name":"demo/index.html","description":""},{"tag":"hero","type":null,"name":"hero.svg","description":null},{"tag":"element","type":null,"description":"iron-meta"}]},"demos":[{"desc":"demo","path":"demo/index.html"}],"hero":"hero.svg"}}}
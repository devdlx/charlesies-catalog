{"elements":[],"behaviors":[{"type":"behavior","desc":"\n`Polymer.IronA11yKeysBehavior` provides a normalized interface for processing\nkeyboard commands that pertain to [WAI-ARIA best practices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding).\nThe element takes care of browser differences with respect to Keyboard events\nand uses an expressive syntax to filter key presses.\n\nUse the `keyBindings` prototype property to express what combination of keys\nwill trigger the event to fire.\n\nUse the `key-event-target` attribute to set up event handlers on a specific\nnode.\nThe `keys-pressed` event will fire when one of the key combinations set with the\n`keys` property is pressed.\n\n","events":[],"jsdoc":{"description":"\n`Polymer.IronA11yKeysBehavior` provides a normalized interface for processing\nkeyboard commands that pertain to [WAI-ARIA best practices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding).\nThe element takes care of browser differences with respect to Keyboard events\nand uses an expressive syntax to filter key presses.\n\nUse the `keyBindings` prototype property to express what combination of keys\nwill trigger the event to fire.\n\nUse the `key-event-target` attribute to set up event handlers on a specific\nnode.\nThe `keys-pressed` event will fire when one of the key combinations set with the\n`keys` property is pressed.\n\n","tags":[{"tag":"demo","type":null,"name":"demo/index.html","description":""},{"tag":"polymerBehavior","type":null,"name":"IronA11yKeysBehavior","description":null}],"orig":"*\n     * `Polymer.IronA11yKeysBehavior` provides a normalized interface for processing\n     * keyboard commands that pertain to [WAI-ARIA best practices](http://www.w3.org/TR/wai-aria-practices/#kbd_general_binding).\n     * The element takes care of browser differences with respect to Keyboard events\n     * and uses an expressive syntax to filter key presses.\n     *\n     * Use the `keyBindings` prototype property to express what combination of keys\n     * will trigger the event to fire.\n     *\n     * Use the `key-event-target` attribute to set up event handlers on a specific\n     * node.\n     * The `keys-pressed` event will fire when one of the key combinations set with the\n     * `keys` property is pressed.\n     *\n     * @demo demo/index.html\n     * @polymerBehavior IronA11yKeysBehavior\n     "},"demos":[{"desc":"demo","path":"demo/index.html"}],"is":"IronA11yKeysBehavior","properties":[{"name":"addOwnKeyBinding","type":"Function","desc":"\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       ","params":[{"name":"eventString"},{"name":"handlerName"}],"jsdoc":{"description":"\nCan be used to imperatively add a key binding to the implementing\nelement. This is the imperative equivalent of declaring a keybinding\nin the `keyBindings` prototype property.\n       ","tags":[],"orig":"*\n       * Can be used to imperatively add a key binding to the implementing\n       * element. This is the imperative equivalent of declaring a keybinding\n       * in the `keyBindings` prototype property.\n       "},"function":true},{"name":"keyBindings","type":"Object","default":""},{"name":"keyEventTarget","type":"Object","desc":"\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         ","published":true,"default":"UNKNOWN","jsdoc":{"description":"\nThe HTMLElement that will be firing relevant KeyboardEvents.\n         ","tags":[],"orig":"*\n         * The HTMLElement that will be firing relevant KeyboardEvents.\n         "}},{"name":"keyboardEventMatchesKeys","type":"Function","params":[{"name":"event"},{"name":"eventString"}],"function":true,"default":""},{"name":"removeOwnKeyBindings","type":"Function","desc":"\nWhen called, will remove all imperatively-added key bindings.\n       ","params":[],"jsdoc":{"description":"\nWhen called, will remove all imperatively-added key bindings.\n       ","tags":[],"orig":"*\n       * When called, will remove all imperatively-added key bindings.\n       "},"function":true},{"name":"_addKeyBinding","type":"Function","params":[{"name":"eventString"},{"name":"handlerName"}],"private":true,"function":true,"default":""},{"name":"_boundKeyHandlers","type":"Array","published":true,"default":"","private":true},{"name":"_collectKeyBindings","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_imperativeKeyBindings","type":"Object","desc":" own properties of everything on the \"prototype\".","published":true,"default":"{}","jsdoc":{"description":" own properties of everything on the \"prototype\".","tags":[],"orig":" own properties of everything on the \"prototype\"."},"private":true},{"name":"_listenKeyEventListeners","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_onKeyBindingEvent","type":"Function","params":[{"name":"keyBindings"},{"name":"event"}],"private":true,"function":true,"default":""},{"name":"_prepKeyBindings","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_resetKeyEventListeners","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"_triggerKeyHandler","type":"Function","params":[{"name":"keyCombo"},{"name":"handlerName"},{"name":"keyboardEvent"}],"private":true,"function":true,"default":""},{"name":"_unlistenKeyEventListeners","type":"Function","params":[],"private":true,"function":true,"default":""},{"name":"attached","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""},{"name":"detached","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""},{"name":"observers","type":"Array","private":true,"configuration":true,"default":""},{"name":"registered","type":"Function","params":[],"private":true,"configuration":true,"function":true,"default":""}]}],"features":[],"elementsByTagName":{}}
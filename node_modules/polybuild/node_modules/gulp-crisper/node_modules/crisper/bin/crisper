#!/usr/bin/env node
/**
 * @license
 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
 */

// jshint node: true
'use strict';

var nopt = require('nopt');
var fs = require('fs');
var path = require('path');
var crisp = require('../index');

var args = nopt(
  {
    source: path,
    html: path,
    js: path
  },
  {
    s: ['--source'],
    h: ['--html'],
    j: ['--js']
  }
);

var outhtml = args.html;
var outscript = args.js;
var outScriptUri = path.relative(path.dirname(args.html), args.js);

if (!outhtml) {
  console.log('Missing output html file!');
  process.exit(1);
}

if (!outscript) {
  console.log('Missing output js file!');
  process.exit(1);
}

var docText = '';

function processSource() {
  var split = crisp.split(docText, outScriptUri);
  fs.writeFileSync(outhtml, split.html, 'utf-8');
  fs.writeFileSync(outscript, split.js, 'utf-8');
}

if (args.source) {
  docText = fs.readFileSync(args.source, 'utf-8');
  processSource();
} else if (!process.stdin.isTTY) {
  process.stdin.setEncoding('utf-8');
  process.stdin.on('readable', function() {
    var chunk = process.stdin.read();
    if (chunk !== null) {
      docText += chunk;
    }
  });
  process.stdin.on('end', processSource);
} else {
  console.log('Supply file with STDIN or --source flag');
  process.exit(1);
}

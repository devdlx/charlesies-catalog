{
  "kind": "blogger#postList",
  "items": [{

    "kind": "blogger#post",
    "id": "6882863710057768162",
    "blog": {
      "id": "8038113399974572777"
    },
    "published": "2015-06-23T16:18:00-07:00",
    "updated": "2015-06-29T20:11:06-07:00",
    "etag": "\"GtyIIQmNmmUjEA0nwhSqMElCJ1g/dGltZXN0YW1wOiAxNDM1NjMzODY2NTM2Cm9mZnNldDogLTI1MjAwMDAwCg\"",
    "url": "http://devdlx.blogspot.com/2015/06/using-elements-in-polymer.html",
    "selfLink": "https://www.googleapis.com/blogger/v3/blogs/8038113399974572777/posts/6882863710057768162",
    "title": "Using Elements in Polymer",
    "content": "<section class=\"guide-section\">\n<h2 id=\"introduction\">Introduction</h2>\n<p>The Polymer element sets provide elements that you can use in your web pages \nand apps. These elements are built with the <a href=\"https://www.polymer-project.org\">Polymer library</a>.</p>\n<p><strong>You don&#39;t need to use Polymer directly</strong> to use these elements.\nHowever, using Polymer you can take advantage of special\nfeatures such as data binding.</p>\n</section>\n\n<section class=\"guide-section\">\n<h2 id=\"installing-elements\">Installing Elements</h2>\n<p>You can install elements one at a time, or install a whole collection of elements.</p>\n<p>Polymer contains a few primary collections of elements:</p>\n<ul>\n<li><p><a href=\"/browse?package=iron-elements\">Iron elements</a>. A set of utility\nelements including generic UI elements (such as icons, input and layout\ncomponents), as well as non-UI elements providing features like AJAX, signaling and storage.</p>\n</li>\n<li><p><a href=\"/browse?package=paper-elements\">Paper elements</a>. A set of UI elements that implement the\n<a href=\"http://www.google.com/design/spec/material-design/\">material design system</a>.</p>\n</li>\n<li><p><a href=\"/browse?package=gold-elements\">Gold elements</a>. Form elements for ecommerce.</p>\n</li>\n<li><p><a href=\"/browse?package=neon-elements\">Neon elements</a>. Animation-related elements.</p>\n</li>\n<li><p><a href=\"/browse?package=platinum-elements\">Platinum elements</a>. Elements for app-like features, \nlike push notifications and offline caching.</p>\n</li>\n</ul>\n<p>If you find a component you want while browsing the docs, simply click <strong>Add to cart</strong> </p>\n<p><iron-icon class=\"inline-icon\" icon=\"add-shopping-cart\"></iron-icon>.\nDon&#39;t worry â€” they&#39;re all free!</p>\n<p>From the cart, you can download either a <code>bower.json</code> file or a ZIP file.</p>\n<ul>\n<li><p><code>bower.json</code> file. Just the metadata you need to install the components using\nBower.</p>\n<p>Bower is the recommended way to manage components. Bower also handles installing\nthe components&#39; dependencies and updating installed components. For more information, \nsee <a href=\"#installing-with-bower\">Installing with Bower</a>.</p>\n</li>\n<li><p>ZIP file. A single file containing your selected components and all their dependencies, \nso you can unzip and start using them immediately. The ZIP file requires no extra tools, \nbut doesn&#39;t provide a built-in method for updating dependencies. For more information, see\n<a href=\"#installing-from-zip-files\">Installing from ZIP files</a>.</p>\n</li>\n</ul>\n<p>To download the components in your cart:</p>\n<ol>\n<li><p>Click the <strong>Cart</strong> <iron-icon class=\"inline-icon\" icon=\"shopping-cart\"></iron-icon> \nand select the <strong>Download</strong> tab.</p>\n</li>\n<li><p>Choose a download format and click <strong>Download</strong>.</p>\n</li>\n</ol>\n<p>Pick your method and follow the instructions in the download dialog.</p>\n<p>If you install one or more elements, you also get the\n<a href=\"https://www.polymer-project.org\">Polymer library</a>, as well as the <a href=\"http://webcomponents.org/polyfills/\">web components polyfills</a>,\nwhich allow you to run Polymer on browsers that don&#39;t yet support\nthe web components standards.</p>\n<h3 id=\"installing-with-bower\">Installing with Bower</h3><p>The recommended way to install <strong>Polymer</strong> elements\nis through Bower. To install Bower, see the <a href=\"http://bower.io/\">Bower web site</a>.</p>\n<p>Bower removes the hassle of dependency management when developing or consuming\nelements. When you install a component, Bower makes sure any dependencies are\ninstalled as well.</p>\n<h4 id=\"project-setup\">Project setup</h4><p>If you haven&#39;t created a <code>bower.json</code> file for your application, run this\ncommand from the root of your project:</p>\n<pre><code>bower init\n</code></pre><p>This generates a basic <code>bower.json</code> file. Some of the questions, like\n&quot;What kind of modules do you expose,&quot; can be ignored by pressing Enter.</p>\n<p>From the <strong>cart</strong>, select the <code>bower.json</code> download and paste the \n<code>dependencies</code> section into your generated <code>bower.json</code> file. The resulting\nfile should look something like this:</p>\n<pre><code>{\n  &quot;name&quot;: &quot;my-project&quot;,\n  &quot;version&quot;: &quot;0.0.0&quot;,\n  &quot;dependencies&quot;: {\n    &quot;iron-a11y-keys&quot;: &quot;PolymerElements/iron-a11y-keys#^1.0.0&quot;,\n    &quot;iron-ajax&quot;: &quot;PolymerElements/iron-ajax#^1.0.0&quot;,\n    &quot;paper-button&quot;: &quot;PolymerElements/paper-button#^1.0.0&quot;\n  }\n}\n</code></pre><p>The next step is to install your selected components:</p>\n<pre><code>bower install\n</code></pre><p>Bower adds a <code>bower_components/</code> folder in the root of your project and\nfills it with your selected elements and their dependencies.</p>\n<h4 id=\"installing-from-the-command-line\">Installing from the command line</h4><p>You can also install components from the command line using the <code>bower install</code> command.</p>\n<p>You can also choose one of the commonly-used packages:</p>\n<ul>\n<li><p><code>PolymerElements/iron-elements</code></p>\n</li>\n<li><p><code>PolymerElements/paper-elements</code></p>\n</li>\n<li><p><code>PolymerElements/gold-elements</code></p>\n</li>\n</ul>\n<p>For example:</p>\n<pre><code>bower install --save PolymerElements/iron-elements\n</code></pre><aside>\n<b>Tip:</b> <code>--save</code> adds the item as a dependency in your app&#39;s <code>bower.json</code>.\n</aside>\n\n\n<h4 id=\"updating-packages\">Updating packages</h4><p>When a new version of Polymer is available, run <code>bower update</code>\nin your app directory to update your copy:</p>\n<pre><code>bower update\n</code></pre><p>This updates all packages in <code>bower_components/</code>.</p>\n<h3 id=\"installing-from-a-zip-file\">Installing from a ZIP file</h3><p>When you download a component or component set as a ZIP file, you get all of\nthe dependencies bundled into a single archive. It&#39;s a great way to get\nstarted because you don&#39;t need to install any additional tools.</p>\n<p>Expand the ZIP file in your project directory to create a <code>bower_components</code> folder.</p>\n<p><img src=\"assets/zip-file-contents.png\" alt=\"Example Zip Contents\"></p>\n<p>Unlike Bower, the ZIP file doesn&#39;t provide a built-in method\nfor updating dependencies. You can manually update components with a new ZIP\nfile, or you can update the files using Bower.</p>\n<h4 id=\"migrating-from-a-zip-file-to-bower\">Migrating from a ZIP file to Bower</h4><p>If you downloaded a ZIP file and subsequently install Bower, you can\nuse <code>bower init</code> to create a new <code>bower.json</code> file with your existing\ndependencies in it:</p>\n<pre><code>bower init\n</code></pre><p>This generates a basic <code>bower.json</code> file. </p>\n<p>Enter <strong>Y</strong> when prompted to set currently installed components as dependencies.</p>\n<p>Some of the questions, like &quot;What kind of modules do you expose,&quot; can be skipped \nby pressing Enter.</p>\n</section>\n\n<section class=\"guide-section\">\n<h2 id=\"using-elements\">Using elements</h2>\n<p>To use elements, first load the web components polyfill library, <code>webcomponents-lite.min.js</code>. \nMany browsers have yet toimplement the various web components APIs. Until they do, <code>webcomponents-lite</code>\nprovides <a href=\"http://webcomponents.org/polyfills/\">polyfill support</a>. <strong>Be sure to include\nthis file before any code that touches the DOM.</strong></p>\n<p>Once you have some elements installed and you&#39;ve loaded <code>webcomponents-lite.min.js</code>,\nusing an element is simply a matter of loading the element file using an\n<a href=\"http://webcomponents.org/articles/introduction-to-html-imports/\">HTML Import</a>.</p>\n<p>An example <code>index.html</code> file:</p>\n<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;!-- 1. Load webcomponents-lite.min.js for polyfill support. --&gt;\n    &lt;script src=&quot;bower_components/webcomponentsjs/webcomponents-lite.min.js&quot;&gt;\n    &lt;/script&gt;\n\n    &lt;!-- 2. Use an HTML Import to bring in some elements. --&gt;\n    &lt;link rel=&quot;import&quot; href=&quot;bower_components/paper-button/paper-button.html&quot;&gt;\n    &lt;link rel=&quot;import&quot; href=&quot;bower_components/paper-input/paper-input.html&quot;&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;!-- 3. Declare the element. Configure using its attributes. --&gt;\n    &lt;paper-input label=&quot;Your name here&quot;&gt;&lt;/paper-input&gt;\n    &lt;paper-button&gt;Say Hello&lt;/paper-button&gt;\n    &lt;div id=&quot;greeting&quot;&gt;&lt;/div&gt;\n\n    &lt;script&gt;\n      // To ensure that elements are ready on polyfilled browsers, \n      // wait for WebComponentsReady. \n      document.addEventListener(&#39;WebComponentsReady&#39;, function() {\n        var input = document.querySelector(&#39;paper-input&#39;);\n        var button = document.querySelector(&#39;paper-button&#39;);\n        var greeting = document.getElementById(&quot;greeting&quot;);\n        button.addEventListener(&#39;click&#39;, function() {\n          greeting.textContent = &#39;Hello, &#39; + input.value;\n        });\n      });\n    &lt;/script&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n</code></pre><aside>\n<b>Note:</b> You must run your app from a web server for the <a href=\"http://webcomponents.org/articles/introduction-to-html-imports/\">HTML Imports</a>\npolyfill to work properly. This requirement goes away when the API is available natively.\n</aside>\n\n\n<p>If you aren&#39;t using the polyfill, you can&#39;t rely on the <code>WebComponentsReady</code> event. Instead, \nsimply place script at the end of the file (after any custom elements).</p>\n<h3 id=\"passing-object-and-array-values-in-attributes\">Passing object and array values in attributes</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes\">HTML attributes</a> are string values, but sometimes you need to pass more complicated values into a custom element, such as objects or arrays. Ultimately, it&#39;s up to the element author to decide how to decode values passed in as attributes, but many Polymer elements understand attribute values that are a JSON-serialized object or array. For example:</p>\n<pre><code>&lt;roster-list persons=&#39;[{&quot;name&quot;: &quot;John&quot;}, {&quot;name&quot;: &quot;Bob&quot;}]&#39;&gt;&lt;/roster-list&gt;\n</code></pre><p>For Polymer elements, you can find the expected type for each attribute listed in the API docs. If you pass the wrong type, it may be decoded incorrectly.</p>\n<!-- \n## Next steps\n\nNow that you've got the basic idea of using and installing elements, it's time to start\nbuilding something!\n\nIn the next section we'll cover using the Core layout elements\nto structure an application's layout.  Continue on to:\n\n<p>\n<a href=\"../elements/layout-elements.html\">\n  <paper-button raised><core-icon icon=\"arrow-forward\" ></core-icon>Layout elements</paper-button>\n</a>\n</p>\n\nTo learn about building your own elements using the Polymer library, see\n[Polymer in 10 minutes](creatingelements.html).\n\nIf you'd rather browse the existing elements, check out the\n<a href=\"../elements/core-elements.html\">Polymer Core elements</a>\nand <a href=\"../elements/paper-elements.html\">Paper elements</a> catalogs.\n-->\n</section>",
    "author": {
      "id": "g107372098053062928531",
      "displayName": "Dev White",
      "url": "http://www.blogger.com/profile/02461264155792296552",
      "image": {
        "url": "http://img2.blogblog.com/img/b16-rounded.gif"
      }
    },
    "replies": {
      "totalItems": "0",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/8038113399974572777/posts/6882863710057768162/comments"
    }
  }, {

    "kind": "blogger#post",
    "id": "5721480744830812082",
    "blog": {
      "id": "8038113399974572777"
    },
    "published": "2015-06-23T16:17:00-07:00",
    "updated": "2015-06-29T20:11:43-07:00",
    "etag": "\"GtyIIQmNmmUjEA0nwhSqMElCJ1g/dGltZXN0YW1wOiAxNDM1NjMzOTAzMzMxCm9mZnNldDogLTI1MjAwMDAwCg\"",
    "url": "http://devdlx.blogspot.com/2015/06/using-neon-amimations.html",
    "selfLink": "https://www.googleapis.com/blogger/v3/blogs/8038113399974572777/posts/5721480744830812082",
    "title": "Using neon amimations",
    "content": "<h1 id=\"neon-animation\">neon-animation</h1><p><code>neon-animation</code> is a suite of elements and behaviors to implement pluggable animated transitions for Polymer Elements using <a href=\"https://w3c.github.io/web-animations/\">Web Animations</a>.</p>\n<p><em>Warning: The API may change.</em></p>\n<ul>\n<li><a href=\"#basic\">A basic animatable element</a></li>\n<li><a href=\"#configuration\">Animation configuration</a><ul>\n<li><a href=\"#configuration-types\">Animation types</a></li>\n<li><a href=\"#configuration-properties\">Configuration properties</a></li>\n<li><a href=\"#configuration-multiple\">Using multiple animations</a></li>\n<li><a href=\"#configuration-encapsulation\">Running animations encapsulated in children nodes</a></li>\n</ul>\n</li>\n<li><a href=\"#page-transitions\">Page transitions</a><ul>\n<li><a href=\"#shared-element\">Shared element animations</a></li>\n<li><a href=\"#declarative-page\">Declarative page transitions</a></li>\n</ul>\n</li>\n<li><a href=\"#animations\">Included animations</a></li>\n<li><a href=\"#demos\">Demos</a></li>\n</ul>\n<p><a name=\"basic\"></a></p>\n<section class=\"guide-section\">\n<h2 id=\"a-basic-animatable-element\">A basic animatable element</h2>\n<p>Elements that can be animated should implement the <code>Polymer.NeonAnimatableBehavior</code> behavior, or <code>Polymer.NeonAnimationRunnerBehavior</code> if they&#39;re also responsible for running an animation.</p>\n<pre><code class=\"lang-js\">Polymer({\n  is: &#39;my-animatable&#39;,\n  behaviors: [\n    Polymer.NeonAnimationRunnerBehavior\n  ],\n  properties: {\n    animationConfig: {\n      value: function() {\n        return {\n          // provided by neon-animation/animations/scale-down-animation.html\n          name: &#39;scale-down-animation&#39;,\n          node: this\n        }\n      }\n    }\n  },\n  listeners: {\n    // this event is fired when the animation finishes\n    &#39;neon-animation-finish&#39;: &#39;_onNeonAnimationFinish&#39;\n  },\n  animate: function() {\n    // run scale-down-animation\n    this.playAnimation();\n  },\n  _onNeonAnimationFinish: function() {\n    console.log(&#39;animation done!&#39;);\n  }\n});\n</code></pre>\n<p><a href=\"http://morethanreal.github.io/neon-animation-demo/bower_components/neon-animation/demo/doc/basic.html\">Live demo</a></p>\n<p><a name=\"configuration\"></a></p>\n</section>\n\n<section class=\"guide-section\">\n<h2 id=\"animation-configuration\">Animation configuration</h2>\n<p><a name=\"configuration-types\"></a></p>\n<h3 id=\"animation-types\">Animation types</h3><p>An element might run different animations, for example it might do something different when it enters the view and when it exits from view. You can set the <code>animationConfig</code> property to a map from an animation type to configuration.</p>\n<pre><code class=\"lang-js\">Polymer({\n  is: &#39;my-dialog&#39;,\n  behaviors: [\n    Polymer.NeonAnimationRunnerBehavior\n  ],\n  properties: {\n    opened: {\n      type: Boolean\n    },\n    animationConfig: {\n      value: function() {\n        return {\n          &#39;entry&#39;: {\n            // provided by neon-animation/animations/scale-up-animation.html\n            name: &#39;scale-up-animation&#39;,\n            node: this\n          },\n          &#39;exit&#39;: {\n            // provided by neon-animation-animations/fade-out-animation.html\n            name: &#39;fade-out-animation&#39;,\n            node: this\n          }\n        }\n      }\n    }\n  },\n  listeners: {\n    &#39;neon-animation-finish&#39;: &#39;_onNeonAnimationFinish&#39;\n  },\n  show: function() {\n    this.opened = true;\n    this.style.display = &#39;inline-block&#39;;\n    // run scale-up-animation\n    this.playAnimation(&#39;entry&#39;);\n  },\n  hide: function() {\n    this.opened = false;\n    // run fade-out-animation\n    this.playAnimation(&#39;fade-out-animation&#39;);\n  },\n  _onNeonAnimationFinish: function() {\n    if (!this.opened) {\n      this.style.display = &#39;none&#39;;\n    }\n  }\n});\n</code></pre>\n<p><a href=\"http://morethanreal.github.io/neon-animation-demo/bower_components/neon-animation/demo/doc/types.html\">Live demo</a></p>\n<p>You can also use the convenience properties <code>entryAnimation</code> and <code>exitAnimation</code> to set <code>entry</code> and <code>exit</code> animations:</p>\n<pre><code class=\"lang-js\">properties: {\n  entryAnimation: {\n    value: &#39;scale-up-animation&#39;\n  },\n  exitAnimation: {\n    value: &#39;fade-out-animation&#39;\n  }\n}\n</code></pre>\n<p><a name=\"configuration-properties\"></a></p>\n<h3 id=\"configuration-properties\">Configuration properties</h3><p>You can pass additional parameters to configure an animation in the animation configuration object.\nAll animations should accept the following properties:</p>\n<ul>\n<li><code>name</code>: The name of an animation, ie. an element implementing <code>Polymer.NeonAnimationBehavior</code>.</li>\n<li><code>node</code>: The target node to apply the animation to. Defaults to <code>this</code>.</li>\n<li><code>timing</code>: Timing properties to use in this animation. They match the <a href=\"https://w3c.github.io/web-animations/#the-animationeffecttiming-interface\">Web Animations Animation Effect Timing interface</a>. The\nproperties include the following:<ul>\n<li><code>duration</code>: The duration of the animation in milliseconds.</li>\n<li><code>delay</code>: The delay before the start of the animation in milliseconds.</li>\n<li><code>easing</code>: A timing function for the animation. Matches the CSS timing function values.</li>\n</ul>\n</li>\n</ul>\n<p>Animations may define additional configuration properties and they are listed in their documentation.</p>\n<p><a name=\"configuration-multiple\"></a></p>\n<h3 id=\"using-multiple-animations\">Using multiple animations</h3><p>Set the animation configuration to an array to combine animations, like this:</p>\n<pre><code class=\"lang-js\">animationConfig: {\n  value: function() {\n    return {\n      // fade-in-animation is run with a 50ms delay from slide-down-animation\n      &#39;entry&#39;: [{\n        name: &#39;slide-down-animation&#39;,\n        node: this\n      }, {\n        name: &#39;fade-in-animation&#39;,\n        node: this,\n        timing: {delay: 50}\n      }]\n    }\n  }\n}\n</code></pre>\n<p><a name=\"configuration-encapsulation\"></a></p>\n<h3 id=\"running-animations-encapsulated-in-children-nodes\">Running animations encapsulated in children nodes</h3><p>You can include animations in the configuration that are encapsulated in a child element that implement <code>Polymer.NeonAnimatableBehavior</code> with the <code>animatable</code> property.</p>\n<pre><code class=\"lang-js\">animationConfig: {\n  value: function() {\n    return {\n      // run fade-in-animation on this, and the entry animation on this.$.myAnimatable\n      &#39;entry&#39;: [\n        {name: &#39;fade-in-animation&#39;, node: this},\n        {animatable: this.$.myAnimatable, type: &#39;entry&#39;}\n      ]\n    }\n  }\n}\n</code></pre>\n<p><a name=\"page-transitions\"></a></p>\n</section>\n\n<section class=\"guide-section\">\n<h2 id=\"page-transitions\">Page transitions</h2>\n<p><em>The artist formerly known as <code>&lt;core-animated-pages&gt;</code></em></p>\n<p>The <code>neon-animated-pages</code> element manages a set of pages to switch between, and runs animations between the page transitions. It implements the <code>Polymer.IronSelectableBehavior</code> behavior. Each child node should implement <code>Polymer.NeonAnimatableBehavior</code> and define the <code>entry</code> and <code>exit</code> animations. During a page transition, the <code>entry</code> animation is run on the new page and the <code>exit</code> animation is run on the old page.</p>\n<p><a name=\"shared-element\"></a></p>\n<h3 id=\"shared-element-animations\">Shared element animations</h3><p>Shared element animations work on multiple nodes. For example, a &quot;hero&quot; animation is used during a page transition to make two elements from separate pages appear to animate as a single element. Shared element animation configurations have an <code>id</code> property that identify they belong in the same animation. Elements containing shared elements also have a <code>sharedElements</code> property defines a map from <code>id</code> to element, the element involved with the animation.</p>\n<p>In the incoming page:</p>\n<pre><code class=\"lang-js\">properties: {\n  animationConfig: {\n    value: function() {\n      return {\n        // the incoming page defines the &#39;entry&#39; animation\n        &#39;entry&#39;: {\n          name: &#39;hero-animation&#39;,\n          id: &#39;hero&#39;,\n          toPage: this\n        }\n      }\n    }\n  },\n  sharedElements: {\n    value: function() {\n      return {\n        &#39;hero&#39;: this.$.hero\n      }\n    }\n  }\n}\n</code></pre>\n<p>In the outgoing page:</p>\n<pre><code class=\"lang-js\">properties: {\n  animationConfig: {\n    value: function() {\n      return {\n        // the outgoing page defines the &#39;exit&#39; animation\n        &#39;exit&#39;: {\n          name: &#39;hero-animation&#39;,\n          id: &#39;hero&#39;,\n          fromPage: this\n        }\n      }\n    }\n  },\n  sharedElements: {\n    value: function() {\n      return {\n        &#39;hero&#39;: this.$.otherHero\n      }\n    }\n  }\n}\n</code></pre>\n<p><a name=\"declarative-page\"></a></p>\n<h3 id=\"declarative-page-transitions\">Declarative page transitions</h3><p>For convenience, if you define the <code>entry-animation</code> and <code>exit-animation</code> attributes on <code>&lt;neon-animated-pages&gt;</code>, those animations will apply for all page transitions.</p>\n<p>For example:</p>\n<pre><code class=\"lang-js\">&lt;neon-animated-pages id=&quot;pages&quot; class=&quot;flex&quot; selected=&quot;[[selected]]&quot; entry-animation=&quot;slide-from-right-animation&quot; exit-animation=&quot;slide-left-animation&quot;&gt;\n  &lt;neon-animatable&gt;1&lt;/neon-animatable&gt;\n  &lt;neon-animatable&gt;2&lt;/neon-animatable&gt;\n  &lt;neon-animatable&gt;3&lt;/neon-animatable&gt;\n  &lt;neon-animatable&gt;4&lt;/neon-animatable&gt;\n  &lt;neon-animatable&gt;5&lt;/neon-animatable&gt;\n&lt;/neon-animated-pages&gt;\n</code></pre>\n<p>The new page will slide in from the right, and the old page slide away to the left.</p>\n<p><a name=\"animations\"></a></p>\n</section>\n\n<section class=\"guide-section\">\n<h2 id=\"included-animations\">Included animations</h2>\n<p>Single element animations:</p>\n<ul>\n<li><code>fade-in-animation</code> Animates opacity from <code>0</code> to <code>1</code>.</li>\n<li><code>fade-out-animation</code> Animates opacity from <code>1</code> to <code>0</code>.</li>\n<li><code>scale-down-animation</code> Animates transform from <code>scale(1)</code> to <code>scale(0)</code>.</li>\n<li><code>scale-up-animation</code> Animates transform from <code>scale(0)</code> to <code>scale(1)</code>.</li>\n<li><code>slide-down-animation</code> Animates transform from <code>translateY(-100%)</code> to <code>none</code>.</li>\n<li><code>slide-up-animation</code> Animates transform from <code>none</code> to <code>translateY(-100%)</code>.</li>\n<li><code>slide-left-animation</code> Animates transform from <code>none</code> to <code>translateX(-100%)</code>;</li>\n<li><code>slide-right-animation</code> Animates transform from <code>none</code> to <code>translateX(100%)</code>;</li>\n<li><code>slide-from-left-animation</code> Animates transform from <code>translateX(-100%)</code> to <code>none</code>;</li>\n<li><p><code>slide-from-right-animation</code> Animates transform from <code>translateX(100%)</code> to <code>none</code>;</p>\n</li>\n<li><p><code>transform-animation</code> Animates a custom transform.</p>\n</li>\n</ul>\n<p>Note that there is a restriction that only one transform animation can be applied on the same element at a time. Use the custom <code>transform-animation</code> to combine transform properties.</p>\n<p>Shared element animations</p>\n<ul>\n<li><code>hero-animation</code> Animates an element such that it looks like it scales and transforms from another element.</li>\n<li><code>ripple-animation</code> Animates an element to full screen such that it looks like it ripples from another element.</li>\n</ul>\n<p>Group animations</p>\n<ul>\n<li><code>cascaded-animation</code> Applys an animation to an array of elements with a delay between each.</li>\n</ul>\n<p><a name=\"demos\"></a></p>\n</section>\n\n<section class=\"guide-section\">\n<h2 id=\"demos\">Demos</h2>\n<ul>\n<li><a href=\"http://morethanreal.github.io/neon-animation-demo/bower_components/neon-animation/demo/grid/index.html\">Grid to full screen</a></li>\n<li><a href=\"http://morethanreal.github.io/neon-animation-demo/bower_components/neon-animation/demo/load/index.html\">Animation on load</a></li>\n<li><a href=\"http://morethanreal.github.io/neon-animation-demo/bower_components/neon-animation/demo/list/index.html\">List item to detail</a> (For narrow width)</li>\n<li><a href=\"http://morethanreal.github.io/neon-animation-demo/bower_components/neon-animation/demo/tiles/index.html\">Dots to squares</a></li>\n<li><a href=\"http://morethanreal.github.io/neon-animation-demo/bower_components/neon-animation/demo/declarative/index.html\">Declarative</a></li>\n</ul>\n</section>",
    "author": {
      "id": "g107372098053062928531",
      "displayName": "Dev White",
      "url": "http://www.blogger.com/profile/02461264155792296552",
      "image": {
        "url": "http://img2.blogblog.com/img/b16-rounded.gif"
      }
    },
    "replies": {
      "totalItems": "0",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/8038113399974572777/posts/5721480744830812082/comments"
    }
  }, {

    "kind": "blogger#post",
    "id": "32599577446718424",
    "blog": {
      "id": "8038113399974572777"
    },
    "published": "2015-06-23T16:04:00-07:00",
    "updated": "2015-06-23T16:04:53-07:00",
    "etag": "\"GtyIIQmNmmUjEA0nwhSqMElCJ1g/dGltZXN0YW1wOiAxNDM1MTAwNjkzMTYwCm9mZnNldDogLTI1MjAwMDAwCg\"",
    "url": "http://devdlx.blogspot.com/2015/06/polymer-web-apps.html",
    "selfLink": "https://www.googleapis.com/blogger/v3/blogs/8038113399974572777/posts/32599577446718424",
    "title": "Polymer web apps",
    "content": "This year we're using polymer for are webapps.",
    "author": {
      "id": "g107372098053062928531",
      "displayName": "Dev White",
      "url": "http://www.blogger.com/profile/02461264155792296552",
      "image": {
        "url": "http://img2.blogblog.com/img/b16-rounded.gif"
      }
    },
    "replies": {
      "totalItems": "0",
      "selfLink": "https://www.googleapis.com/blogger/v3/blogs/8038113399974572777/posts/32599577446718424/comments"
    }
  }],
  "etag": "\"GtyIIQmNmmUjEA0nwhSqMElCJ1g/MjAxNS0wNi0zMFQwMzoxMTo0My4zMzFa\""
}
